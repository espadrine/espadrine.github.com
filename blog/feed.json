{
  "version": "https://jsonfeed.org/version/1",
  "title": "The espadrine blog.",
  "description": "Tech deep dives, discoveries, and analyses.",
  "home_page_url": "https://espadrine.github.io/blog/",
  "feed_url": "https://espadrine.github.io/blog/feed.json",
  "author": {
    "name": "Thaddée Tyl",
    "url": "https://github.com/espadrine"
  },
  "favicon": "https://avatars.githubusercontent.com/u/100689?s=64",
  "items": [
      {
        "id":  "https://espadrine.github.io/blog/posts/mean-range-of-bell-curve-distributions.html",
        "url": "https://espadrine.github.io/blog/posts/mean-range-of-bell-curve-distributions.html",
        "title": "Mean Range of Bell Curve Distributions",
        "tags": "stats crypto",
        "date_published": "2021-01-13T19:21:50Z"
        "content_html": "<h1>Mean Range of Bell Curve Distributions</h1>\n<p><strong>Abstract:</strong>\nWhen sampling several data points from a known statistical distribution,\na valuable indication of the spread is the range of the set of values obtained.\nSince the sampling is probabilistic,\nthe best estimate we can hope for is the expected value of the range.\nThat mean range,\nalong with the expected maximum and minimum values of the sampling set,\nare traditionally difficult to compute with existing means.\nWe present a novel method to perform that computation,\nand its implications on the correct computation of the balls-into-bins problem.</p>\n<h2>1. Generic Derivation</h2>\n<p>Consider a distribution with probability density function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span>.\nIts associated random variable, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, can be either real-valued or discrete.</p>\n<p>We observe a sample of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> independent values taken from that distribution.</p>\n<p>The question we ask is:\nWhat is the range of values that have a probability ≥ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span>\n(across samplings of N values) of appearing in the sample?\nFor instance, for a mean range, one would pick <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\gamma = \\frac{1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>.</p>\n<p>Despite being potentially continuous, we can research the probability\nthat a given value appears at least once in the sample.\nThat is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>−</mo><msub><mi>P</mi><mrow><mi>e</mi><mi>x</mi><mi>c</mi><mi>l</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">1 - P_{excluded}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mrow><mi>e</mi><mi>x</mi><mi>c</mi><mi>l</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">P_{excluded}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the probability\nthat the value does not appear in the sample.</p>\n<p>In turn, given that the sample is independently drawn each time,\nthe probability that a value is not drawn once,\nis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mrow><mi>e</mi><mi>x</mi><mi>c</mi><mi>l</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>d</mi></mrow></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mi>N</mi></msup></mrow><annotation encoding=\"application/x-tex\">P_{excluded} = (1 - \\phi(x))^N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>Thus, the probability that a given value is in the sample,\nis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>−</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mi>N</mi></msup></mrow><annotation encoding=\"application/x-tex\">1 - (1 - \\phi(x))^N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span></span></span></span>.\nBy definition, that probability is equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span>.</p>\n<p>We can therefore derive that the values <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> that are in range,\nfollow the equation:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≥</mo><mn>1</mn><mo>−</mo><mroot><mrow><mn>1</mn><mo>−</mo><mi>γ</mi></mrow><mi>N</mi></mroot></mrow><annotation encoding=\"application/x-tex\">\\phi(x) \\geq 1 - \\sqrt[N]{1 - \\gamma}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.24em;vertical-align:-0.28112499999999985em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7483150000000002em;\"><span style=\"top:-2.90665em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9588750000000001em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span><span style=\"top:-2.9188750000000003em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.28112499999999985em;\"><span></span></span></span></span></span></span></span></span></span>\n<p>When <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span> is a bell curve distribution,\nthe corresponding equality has two solutions for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>.</p>\n<h2>2. Application to the Normal</h2>\n<p>Some bell distributions are more easily invertible.\nThankfully, <em>this is true of the Normal distribution</em>,\nwhich will enable us to produce good estimations for all distributions,\nthanks to the <strong>central limit theorem</strong>.</p>\n<p>First, let us derive the exact Normal solution.\nWe have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"script\">N</mi><mo stretchy=\"false\">(</mo><mi>μ</mi><mo separator=\"true\">,</mo><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi(x) = \\mathcal{N}(\\mu, \\sigma^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.14736em;\">N</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">μ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup></mrow></mfrac></mrow></msup><msqrt><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup><mi>π</mi></mrow></msqrt></mfrac></mrow><annotation encoding=\"application/x-tex\">\\phi(x) = \\frac{e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}}{\\sqrt{2\\sigma^2\\pi}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9360900000000005em;vertical-align:-0.93em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0060900000000004em;\"><span style=\"top:-2.4840359999999997em;\"><span class=\"pstrut\" style=\"height:3.32909em;\"></span><span class=\"mord\"><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9550540000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span><span style=\"top:-2.915054em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.08494599999999997em;\"><span></span></span></span></span></span></span></span><span style=\"top:-3.55909em;\"><span class=\"pstrut\" style=\"height:3.32909em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-4.00609em;\"><span class=\"pstrut\" style=\"height:3.32909em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32909em;\"><span style=\"top:-3.4534200000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.250957142857143em;\"><span style=\"top:-2.5061857142857145em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9384399999999999em;\"><span style=\"top:-2.93844em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.2255000000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.5020714285714285em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">μ</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.04844em;\"><span style=\"top:-3.04844em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.49381428571428565em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.93em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<p>Thus the solution to the general inequality is:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>∈</mo><mrow><mo fence=\"true\">[</mo><mi>μ</mi><mo>±</mo><msqrt><mrow><mo>−</mo><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup><mi>ln</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msqrt><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup><mi>π</mi></mrow></msqrt><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mroot><mrow><mn>1</mn><mo>−</mo><mi>γ</mi></mrow><mi>N</mi></mroot><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></msqrt><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">x \\in \\left[\n  \\mu \\pm \\sqrt{-2\\sigma^2\n    \\ln(\\sqrt{2\\sigma^2\\pi}(1-\\sqrt[N]{1-\\gamma}))}\n\\right]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">±</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.395277em;\"><span class=\"svg-align\" style=\"top:-3.8em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\">−</span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">ln</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.003929em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span><span style=\"top:-2.9639290000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.036070999999999964em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7483150000000002em;\"><span style=\"top:-2.90665em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9588750000000001em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span><span style=\"top:-2.9188750000000003em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.28112499999999985em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.355277em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.8800000000000001em;\"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90\nl0 -0\nc4,-6.7,10,-10,18,-10 H400000v40\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.444723em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span></span></span>\n<p>From this, we can compute the maximum and minimum exactly,\nalong with the mean range, which follows this formula:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>2</mn><msqrt><mrow><mo>−</mo><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup><mi>ln</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msqrt><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup><mi>π</mi></mrow></msqrt><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mroot><mrow><mn>1</mn><mo>−</mo><mi>γ</mi></mrow><mi>N</mi></mroot><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">2\\sqrt{-2\\sigma^2 \\ln(\\sqrt{2\\sigma^2\\pi}(1-\\sqrt[N]{1-\\gamma}))}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.84em;vertical-align:-0.444723em;\"></span><span class=\"mord\">2</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.395277em;\"><span class=\"svg-align\" style=\"top:-3.8em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\">−</span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">ln</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.003929em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span><span style=\"top:-2.9639290000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.036070999999999964em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7483150000000002em;\"><span style=\"top:-2.90665em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9588750000000001em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span><span style=\"top:-2.9188750000000003em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.28112499999999985em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.355277em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.8800000000000001em;\"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90\nl0 -0\nc4,-6.7,10,-10,18,-10 H400000v40\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.444723em;\"><span></span></span></span></span></span></span></span></span></span>\n<h2>3. Application to the Binomial</h2>\n<h2>4. Balls Into Bins</h2>\n<h2>Conclusion</h2>\n<script type=\"application/ld+json\">\n{ \"@context\": \"http://schema.org\",\n  \"@type\": \"BlogPosting\",\n  \"datePublished\": \"2021-01-13T19:21:50Z\",\n  \"keywords\": \"stats, crypto\" }\n</script>\n",
      },
      {
        "id":  "https://espadrine.github.io/blog/posts/nato-phonetic-alphabet.html",
        "url": "https://espadrine.github.io/blog/posts/nato-phonetic-alphabet.html",
        "title": "A Learning Resource for the NATO Phonetic Alphabet",
        "tags": "codes",
        "date_published": "2020-11-11T19:18:25Z"
        "content_html": "<h1>A Learning Resource for the NATO Phonetic Alphabet</h1>\n<iframe src=https://espadrine.github.io/nato-alphabet/\n  style='width:100%; height:1000px; border:0'></iframe>\n<p>A while back, I wrote <a href=\"https://espadrine.github.io/nato-alphabet/\">a resource</a>\nto help me learn the <a href=\"https://www.nato.int/cps/en/natohq/declassified_136216.htm\">NATO phonetic alphabet</a>.</p>\n<p><em>(Link to <a href=\"https://espadrine.github.io/nato-alphabet/\">the full website here</a>.)</em></p>\n<h2>What does this resource do well?</h2>\n<p>A major aspect of good learning, is the randomization of tests.</p>\n<p>When you must remember by heart a large number of element,\na common mistake I find in schoolbooks\nis for the exercises to repeat only the past ten new words or so.</p>\n<p>It is critical, to achieve a leveled, continuous learning experience,\nto randomly sample all words previously learnt,\nregardless of how old.\nThat counteracts the inevitable forgetting of short-term-memory words.</p>\n<p><em>If you can <strong>predict</strong> the words that your memory must remember,\nyou will subconsciously forget the words that won’t appear.</em>\nWorse, you may link them to the predictable sequence of words\nthat the test is built on,\ncausing you to only remember one word when it is next to the other,\nwhich in real life, it will often not be.</p>\n<p>This principle is noticeably unfollowed in language manuals,\nwith predictable effects on my own learning.\nI was (and am) frustrated to not have tools like these.</p>\n<p>Good randomness is critical to healthy knowledge acquisition.</p>\n<p>In fact, many machine learning systems heavily depend on that insight.\nFor instance, <a href=\"https://deepmind.com/blog/article/alphago-zero-starting-scratch\">AlphaGo</a> carefully randomized the sequence of games\nand the stage of the games that it had to learn,\nto avoid the system from overfitting on one game, or on the late game.</p>\n<h2>Why did I want to learn it?</h2>\n<p>When investigating production issues,\ndevelopers and operations managers often have to communicate identifiers\nso they can share their findings.</p>\n<blockquote>\n<p>— “<em>Hey, take a look at payment authorization number\n<code>78223a6b-6b41-41ac-9cc1-00b76a664ac9</code>:\nthe amount matches the settlement we are looking for.</em>”</p>\n</blockquote>\n<p><strong>Sequential identifiers</strong> are short (at first),\nbut betray information about when the entity was created,\nwhich is often not welcome.\n<em>Identifiers should never contain potentially secret information.</em></p>\n<p><strong>Traditional UUID v4</strong> are not great at transmitting identifiers efficiently,\nespecially vocally.</p>\n<p>Indeed, sequences of digits have a higher error rate when vocally transmitted.\nThey are easy to confuse with each other, after all;\nusing a larger glyph set increases distinguishability.</p>\n<p><a href=\"https://qonto.com/en\">At work</a>, we do have a lot of UUIDs.\nIn many spots in the deeper core of the system, however,\nI opted for <strong>128-bit CSPRNG-produced base64 identifiers</strong>.\nThey are shorter (⌈128÷log2(64)⌉ = 22 characters)\nand harder to mistype.</p>\n<p>Looking back, one flaw with those is that it is very hard\nto communicate them vocally.\nYou always end up having to specify uppercase / lowercase.\nEven when mentally copying these IDs on your own,\nyou often use the wrong case.</p>\n<p>Instead, <strong>base32</strong> does away with case,\nmaking it very suitable for vocal transmission.\nWhen lowercase, it is even particularly easy to read.</p>\n<p>I must not be the only one with that opinion.\nIn fact, in the Bitcoin world,\nthe account number format has been switched from a base58 one,\nto the new <a href=\"https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki\">Bech32</a> addresses introduced with SegWit.\nBehold, it uses lowercase base32!</p>\n<blockquote>\n<p><code>bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4</code></p>\n</blockquote>\n<p>Of course, Bitcoin addresses are still very long.\nToo long to transmit in a single breath.</p>\n<p>We could constrain ourselves to 128 random bits,\nyielding a ⌈128÷log2(32)⌉ = 26-character identifier.\nAs long as the entire alphabet!</p>\n<p>There is a shorter technique:</p>\n<ol>\n<li>Identifier generator nodes are globally assigned a random 16-bit number.</li>\n<li>They all share a 128-bit secret.</li>\n<li>They each have a separate 48-bit counter that they increment for each new ID.</li>\n<li>Each new identifier is <code>PRP((nodeID &lt;&lt; 48) ^ counter, secret)</code>,\nwhere PRP is a 64-bit block cipher, like <a href=\"https://nsacyber.github.io/simon-speck/\">Speck64/128</a> or XTEA.</li>\n</ol>\n<p>Since a block cipher is a <a href=\"https://en.wikipedia.org/wiki/Pseudorandom_permutation\">Pseudo-Random Permutation</a> (or PRP for short),\nit will cycle through all 64-bit values without repetition.\nThe output will be essentially indistinguishably random,\navoiding leaking information about the identified object.\nAnd a 64-bit number is only 13 characters of base32!</p>\n<blockquote>\n<p>— “<em>Hey, take a look at payment authorization number <code>nhimasuge7f52</code>:\nthe amount matches the settlement we are looking for.</em>”</p>\n</blockquote>\n<p>That, finally, can be easily transmitted using the NATO system.</p>\n<p><em>(This system is likely overkill, but a fun thought.)</em></p>\n<hr />\n<p><em><a href=\"https://www.reddit.com/r/espadrine/comments/jydh6k/a_learning_resource_for_the_nato_phonetic_alphabet/\">Click to comment.</a></em></p>\n<script type=\"application/ld+json\">\n{ \"@context\": \"http://schema.org\",\n  \"@type\": \"BlogPosting\",\n  \"datePublished\": \"2020-11-11T19:18:25Z\",\n  \"keywords\": \"codes\" }\n</script>\n",
      },
      {
        "id":  "https://espadrine.github.io/blog/posts/webidentity.html",
        "url": "https://espadrine.github.io/blog/posts/webidentity.html",
        "title": "WebIdentity: One-click passwordless signups & logins",
        "tags": "crypto web",
        "date_published": "2020-07-05T20:19:02Z"
        "content_html": "<h1>WebIdentity: One-click passwordless signups &amp; logins</h1>\n<p>I talked about <a href=\"https://espadrine.github.io/blog/posts/memorable-passwords.html\">best-practices for password-based logins last time</a>,\nand gave tools to help you follow them.</p>\n<p>Password managers (and generators) must become prevalent.\nThankfully, it is becoming a reality: beyond services such as 1password or Dashlane,\nbrowsers themselves now offer those features built-in.\nIt sprouted from the bookmark sync feature, became password sync,\nand now has suggested random passwords.</p>\n<p>But <strong>passwords are inherently flawed</strong> as a security user experience.\nHonestly, they slow down both registration to a new service, and logins.\nIt annoys users, allows terrible security practices, and\nloses businesses billions yearly, both on users that give up,\nand reputation from security issues.</p>\n<p>There is a high cost to websites to implement and maintain security practices\naround password storage.\nBy the way, this is the most significant example of “roll your own crypto”,\nas each website defines its own authentication protocol.</p>\n<p>There is also a cost for browsers: maintaining a list of passwords,\none for each website, makes for a fairly large total storage.\nA significant, pernicious consequence is the emergence of siloes,\nencouraging browser monopolies:\nwhy would I switch browsers, when it is so hard to copy all those passwords over?</p>\n<p>My hope for the future of authentication:</p>\n<ul>\n<li>Become so seamless that <strong>both signing up and logging in is a single click</strong>.</li>\n<li>We want that improved UX, not just with the same security level that we have now, but a much better one.\n<ul>\n<li>An attacker that got its hands on a fresh plaintext copy of the website’s database and secrets should be unable to authenticate on behalf of users.</li>\n<li>Even if someone can decrypt traffic on-the-fly, from seeing the authentication information, they also can’t impersonate the user for more than 30 seconds afterwards.</li>\n<li>Even with both a full-on breach of the website’s servers <em>and</em> on-the-fly traffic decryption, they cannot sign up nor log in as you.</li>\n</ul>\n</li>\n<li>And, cherry on top, we want to do so in such a way that <em>exporting identities between browsers and devices is extremely easy</em>.</li>\n</ul>\n<p>I called this new scheme <strong>WebIdentity</strong>.</p>\n<h2>The place of WebAuthn</h2>\n<p>Your mind may be itching to yell: “WebAuthn!”\nSo, before digging into the gritty details of WebIdentity,\nlet’s talk about the awesomeness that is WebAuthn.</p>\n<p><a href=\"https://webauthn.guide/\">WebAuthn</a> is an authentication scheme that relies on public-key cryptography.</p>\n<p>A phenomenal advantage of WebAuthn over WebIdentity is\nin the ability to leverage a wide range of different security devices\n(Yubico, TouchID, Windows Hello, and so many more).\nIn short, it is <em>absolutely amazing</em> at second-factor authentication (2FA),\nwhich is completely outside the scope of WebIdentity and would complement it beautifully.</p>\n<p>However, WebAuthn has severe disadvantages for use as main authentication,\nwhich WebIdentity solves wonderfully.\nBetting on WebAuthn as the main sign-up and log-in system\nrisks significantly delaying the wide adoption\nof passwordless authentication on the Web:</p>\n<ul>\n<li>Websites do not implement it because:\n<ul>\n<li>on the backend, it requires them to implement a PKI, which is an endeavor.\nMultiple public keys can map to the same user, and management of the keys\n(and of the certificate validation upon sign-up, when necessary) needs proper handling.</li>\n<li>on the front-end, it requires subtle cryptography to handle the challenge handshake,\nthat needs to be implemented not just for the Web, but for iOS and Android apps.\nWith WebIdentity, there is no front-end change at all.</li>\n</ul>\n</li>\n<li><strong>Feature detection</strong> is involved. Both the front-end and the backend must know\nthat the user can do WebAuthn on that device, and ideally, the backend stores it\non secure httpOnly cookies. It also must store the list of credential IDs:\nthere could be multiple users on the same device.\nWebIdentity relies on the user management feature already built into the browser’s Sync.</li>\n<li>For websites, it requires a <strong>database access</strong> for each authentication.\nThat contributes to a requirement to only use WebAuthn for login, not session authentication.\nWebIdentity does both in one fell swoop, and database interaction is only needed for sign-ups and logins.</li>\n<li>More damningly, the protocol requires a back-and-forth;\nin other words, it cannot be used directly for all HTTP requests.\nIt needs a separate, <strong>unspecified session key management scheme</strong> such as JWT.\nWith WebIdentity, the user authentication scheme is indistinguishable from\nthe session authentication scheme.</li>\n<li>Most damningly, <strong>exporting the public/private key pairs between browsers</strong> was not part of the design process.\nIn fact, synchronizing those keys (some of which can change) between browsers is a complex operation.\nIt goes so far that the <a href=\"https://developer.apple.com/videos/play/wwdc2020/10670/\">official recommendation from browser makers</a> is to never have WebAuthn log-in\nbe the only log-in mechanism, because private keys are tied to the device.\nChanging (or losing) devices require logging in through another means.\nThus, it is only a faster log-in process (click login, select identity, accept request, enter biometrics or press Yubikey button)\nthan passwords, but passwords remain the main log-in weak link that won’t die.\nMeanwhile, WebIdentity has a faster log-in still (there is literally just the click login step),\nand can fully replace passwords.</li>\n<li>To roll it out slowly, it started being <strong>used only as 2FA</strong>.\nIt is now usually tied to things like Yubikey in the UX,\nand seems doomed to remain only used for 2FA,\nas a consequence of everything listed above.</li>\n<li>WebAuthn suffers from <strong>crypto-agility</strong>, similar to JWT where it caused security faults.\nIn WebIdentity, algorithms are set for each version,\nand version changes are only performed when the previous algorithm is broken.\nSince there is really only one cryptographic algorithm, it is easy to keep track of.</li>\n<li>In the same vein, it is easy for a service operator to <strong>misuse</strong> WebAuthn,\nand end up losing major security protections. There are many subtle traps.\nFor instance, they may generate challenges with a poor random source,\nor forget to validate some metadata field received.</li>\n<li>Where is the <strong>NFC antenna</strong> on this phone?</li>\n<li>Public-key cryptography is currently at risk from <strong>quantum computing</strong> advances,\nwhereas WebIdentity relies on primitives that are essentially <a href=\"https://en.wikipedia.org/wiki/SHA-3#Security_against_quantum_attacks\">quantum-resistant</a>.</li>\n</ul>\n<p>All in all, WebAuthn is harder for website operators to put in place than passwords,\nwhile WebIdentity is simpler.\n(Although they would only do so once all major evergreen browsers implement it.)</p>\n<p>The status quo: despite browsers’ efforts to add support not just for Yubikeys but also TouchID,\nwebsite owners are very shy in implementing support even just for 2FA,\nin part because of the implementation complexity,\nand the user experience is frustrating enough currently that few actually use it.\nI do not know any independent commercial website\nthat uses WebAuthn as its primary log-in system, instead of passwords.</p>\n<p>WebIdentity can quickly replace password authentication with a much simpler system,\nboth for users, website operators, and browsers;\nwhile WebAuthn is likely to have a slow, 10-year adoption across websites.</p>\n<p>However, WebIdentity does not replace WebAuthn!\nWebAuthn is still extremely valuable as 2FA,\nwhich should really be used on all sensitive actions on the website.</p>\n<h2>Initialization</h2>\n<p>First, the browser stores a single random 256-bit secret for each user,\ncalled the <strong>Browser Key (BK)</strong>,\nsynchronized across all devices through its Sync feature.\nThat key never leaves the browser’s Sync servers.</p>\n<p>Each website keeps around a random 256-bit secret key (<strong>Website Key, WK</strong>)\nidentified by a <strong>key ID (KID)</strong>,\ntypically a number incremented every time the key needs to change,\nwhich should be rare, eg. yearly.\nIt must be generated by a CSPRNG, for instance from /dev/urandom.</p>\n<h2>Sign-Up</h2>\n<p>When going on a page, the website advertizes that it supports WebIdentity\nby delivering this header (even on 200 status results):</p>\n<pre><code>WWW-Authenticate: Identity v1\n</code></pre>\n<p>Upon seeing it, the browser displays a “Log in” button <em>in its chrome</em>\n(above the <a href=\"https://textslashplain.com/2017/01/14/the-line-of-death/\">line of death</a>, thus not in the webpage),\nif the website uses TLS and HSTS.</p>\n<p>When the user clicks it, from then on, for all HTTPS requests to that website,\nthe browser will authenticate the user to the website,\nand display a “Log out” button instead of the “Log in” one.</p>\n<p>But first, there is a tiny sign-up handshake.\nFirst, the browser computes the <strong>User’s Website Key (UWK)</strong> as the MAC\nof the effective Top-Level Domain <a href=\"https://publicsuffix.org/\">eTLD+1</a>:\nit is unique for each entity that has control over a given cookie space,\nand incidentally will also soon be <a href=\"https://chromium.googlesource.com/chromium/src/+/master/docs/security/url_display_guidelines/url_display_guidelines.md#registrabledomain\">the only URL part shown</a> (to fight phishing).\nSo the security UX will be consistent for identity and website trust here.\nThe UWK MAC is keyed with BK, the user’s Sync secret kept by the browser.\nThe UWK is a <em>secret that the browser has for each user and each website</em>.\nIt is never stored and only transmitted between the browser’s Sync servers\nand the user’s browser upon sign-up and login.</p>\n<p>Then, the browser takes a MAC of the ASCII string “AUID”, keyed with UWK:\nthis becomes the <strong>Authentication User ID (AUID)</strong>\nwhich will <em>identify the user in each HTTP request</em>.\nEavesdropper cannot find the UWK from it, which is good,\nsince it is only used for very rare, sensitive operations.</p>\n<p>Finally, the browser picks a <strong>Log-In Date (LID)</strong> to send as an HTTP header,\nand computes its MAC, keyed with the User’s Website Key (UWK).\nThe result is the <strong>Log-In Proof token (LIP)</strong>,\na piece of information kept secret by the browser,\nwhich will be later revealed to the website when logging back in,\nto strongly prove that the initiator is the initial user.</p>\n<p>Aside: as you can imagine, there will be a whole tree of hashes,\neach with a different purpose and name.\nTo help you follow along, here is a picture of the entire tree:</p>\n<p><img src=\"../assets/webidentity/webidentity-hash-tree.svg\" alt=\"WebIdentity hash tree\" /></p>\n<p>The browser reloads the page with the Date header set to the LID,\nand the following new header\n(all in one line, with spaces instead of newlines; the newlines are for readability):</p>\n<pre><code>Authorization: Identity v1 SignUp\n  auid=&quot;VzX3h8VumdWIY7MiUCcYwnS8kz9DxdtFzQftFhLvkFkK&quot;\n  liv=&quot;7deoyUWH9wk-x15mb-vr7i57rU0VojDLwc99EjtKUlUK&quot;\n</code></pre>\n<ul>\n<li><code>Identity</code> indicates that it uses this authorization scheme.</li>\n<li><code>v1</code> is the version of the scheme; it likely would change very rarely, typically when the hash function gets broken.</li>\n<li><code>SignUp</code> is the action: here, we sign up as a new user.</li>\n<li><code>VzX3…</code> is the Authentication User ID (AUID), which the website will rely on to identify the user.</li>\n<li><code>7deo…</code> is the <strong>Log-In Verification token (LIV)</strong>,\na MAC of the AUID keyed with the Log-In Proof token (LIP).</li>\n<li>The LID is sent in the Date header so that the website can store it.</li>\n</ul>\n<p>The website cannot guess the LIP, nor can any eavesdropper,\nwhich is good, since the LIP will be used to prove knowledge of BK\nfor rare, sensitive updates.</p>\n<p>The website identifies the user from the AUID (indirectly),\nbut it cannot guess the user’s AUID for another website.\nBesides, two websites cannot know that their respective AUIDs correspond to the same user\nwithout seriously endangering the security of their own authentication.\nThat protects the user’s privacy across websites.</p>\n<p>Upon receiving a SignUp request,\nthe website takes a MAC of the AUID, keyed with WK (the website’s secret key).\nThat is the <strong>Website’s User Key (WUK)</strong>, a secret kept by the website, unique to a user.\nIt is roughly the opposite of the User’s Website Key (UWK).\nThe user cannot know the website’s other users’ WUK,\nsince it would need both their BK and the WK to do so.</p>\n<p>Then, the website computes the <strong>User ID (UID)</strong> as the MAC of the AUID\nkeyed with its Website’s User Key (WUK).\nThe UID will be stored in database, etc.\nIntruders cannot find the AUID nor the WUK from read-only access to the database,\npreventing them from crafting fake authenticated requests.</p>\n<p>Then it does the following:</p>\n<ol>\n<li>It verifies that the LID is within one minute of its known date. If not, the sign-up is denied.</li>\n<li>It stores in database the UID, the LID, and the LIV, likely with a mapping to its internal user identifier.\nIn our example, the UID is <code>XvP5sxmrh8UmpgYqJ9OmKs9HqhxcdS5-lUxlaEuhBc4</code>.</li>\n</ol>\n<p>Then, the website prepares a response.</p>\n<p>First, it constructs the <strong>Log-In Shared Key (LISK)</strong>\nas the MAC of the Log-In Date (LID) keyed with the Website’s User Key (WUK).\nThat key will be <em>shared between the website and the browser</em> for one hour,\nand will be used to compute a TOTP.</p>\n<p>If the website sees that the user was already signed up,\nit will accept it, but with slight differences in the response\nthat are discussed in the Log In section.\nOtherwise, it returns a page with the following header:</p>\n<pre><code>WWW-Authenticate: Identity v1 Key\n  kid=&quot;2020&quot;\n  auid=&quot;VzX3h8VumdWIY7MiUCcYwnS8kz9DxdtFzQftFhLvkFkK&quot;\n  lisk=&quot;Ii6JLfnbWJgcy0WtworWKRIlJIPSGkQwSAvBtQM1OEgK&quot;\n</code></pre>\n<ul>\n<li><code>Key</code> is the action instructing the browser to store the website’s key.</li>\n<li><code>2020</code> is the KID, placed first to ease inspection.</li>\n<li><code>VzX3…</code> is the AUID, identifying the user in all future requests.</li>\n<li><code>Ii6J…</code> is the LISK, which will be used to prove that the user is who they claim to be for one hour.</li>\n</ul>\n<p>(The website can also send identifying data,\nsuch as its internal ID (eg. a username or its database’s generated <code>user_id</code>),\nin a payload encrypted with the WUK as key,\nin the Cookies header, ideally Secure and httpOnly.\nThat lets it avoid a database fetch when it relies on an internally-produced ID\ninstead of the UID provided by WebIdentity.\nThat part is outside the definition of WebIdentity, however.)</p>\n<p>The browser stores the version (v1), the KID, the LID and the LISK in its Sync feature.</p>\n<h2>Authentication</h2>\n<p>On each HTTP request while logged in, the browser sends the AUID,\nalong with a MAC of the Date HTTP header keyed with the LISK:</p>\n<pre><code>Authorization: Identity v1 Auth\n  kid=&quot;2020&quot;\n  auid=&quot;VzX3h8VumdWIY7MiUCcYwnS8kz9DxdtFzQftFhLvkFkK&quot;\n  lid=&quot;Fri, 03 Jul 2020 10:11:22 GMT&quot;\n  totp=&quot;YrrliECBpS34lKob4xMOIKgM5zw8_zxMsBBleIIfGHIK&quot;\n</code></pre>\n<ul>\n<li><code>Auth</code> is the action to authenticate the request.</li>\n<li><code>2020</code> is the KID in use.</li>\n<li><code>VzX3…</code> is the AUID, as returned from the SignUp response.</li>\n<li>The Log-In Date (LID) lets the website compute the LISK.</li>\n<li><code>Yrrl…</code> is the <strong>Time-based One-Time Password (TOTP)</strong>:\nthe MAC of the Date (<code>Fri, 03 Jul 2020 14:32:19 GMT</code>), keyed with the LISK.</li>\n</ul>\n<p>When receiving an Auth request, the website must:</p>\n<ol>\n<li>Verify that the Date sent is within one minute of the accurate date. The request is denied otherwise.</li>\n<li>Verify that the Log-In Date (LID) is not more than one hour old.\nThe request is denied otherwise: the browser always knows to make a LogIn request (seen below) instead.\n(Note that it does not matter if the LID does not match the stored LID.\nThat way, multiple browsers can share the same BK and still authenticate in parallel.)</li>\n<li>Compute the MAC of the request’s AUID, keyed with the WK. That is the WUK.</li>\n<li>Compute the MAC of the LID, keyed with the WUK. That is the LISK.</li>\n<li>Compute the MAC of the Date, keyed with the LISK. Verify that it matches the TOTP. The request is denied otherwise.</li>\n<li>Compute the MAC of the request’s AUID, keyed with the WUK: that is the UID, which can be used for application purposes.</li>\n</ol>\n<p>Note that this computation does not require database access, and is quite efficient in software.</p>\n<p>The explanation of the main principle of operation is already finished.\nLet’s look at a few events that may occur,\nranging in order from uncommon (monthly?) to extremely rare (every 20 years?).</p>\n<h3>Log Out</h3>\n<p>When logged in, the browser’s Log In button changes to a Log out button.</p>\n<p>When clicking the Log out button,\nthe browser deletes the protocol version, KID, AUID and LISK in Sync;\nand no longer sends Authorization headers.</p>\n<p>The browser logs out and logs back in automatically every hour,\nto ensure it does not use the same LISK for too long.\nBecause of the way log-outs and log-ins work,\nthis is entirely seamless and invisible to the user.</p>\n<h3>Log In</h3>\n<p>When the browser tries to log in, in fact, it starts by simply doing the sign-up procedure.</p>\n<p>The website detects that a sign-up already occured, and initiates the login procedure:</p>\n<pre><code>WWW-Authenticate: Identity v1 LogIn\n  lid=&quot;Fri, 03 Jul 2020 10:11:22 GMT&quot;\n</code></pre>\n<p>You can find after the LogIn keyword, the Log-In Date (LID) that the website registered for this UID.</p>\n<p>The browser’s Sync server computes the User’s Website Key\n(UWK, a MAC of the eTLD+1 keyed with BK),\nand keys with it a MAC of that LID.\nThat gives it the Log-In Proof (LIP) that was created during sign-up.</p>\n<p>Just as with a normal sign-up,\nthe browser picks a new <strong>Log-In Date (LID)</strong> to send as an HTTP header,\nand computes its MAC, keyed with the User’s Website Key (UWK).\nThe result is a brand-new <strong>Log-In Proof (LIP)</strong>.\n(In our example, the new LID is <code>Fri, 03 Jul 2020 15:27:43 GMT</code>.)</p>\n<p>It then sends a LogIn request,\nwhich is essentially identical to the SignUp request, but with the new LIV:</p>\n<pre><code>Authorization: Identity v1 LogIn\n  auid=&quot;VzX3h8VumdWIY7MiUCcYwnS8kz9DxdtFzQftFhLvkFkK&quot;\n  olip=&quot;8x8HgKzEl5nok-JNwT2PCiwnfwrCD2rOxtMTUotU4hgK&quot;\n  liv=&quot;S4GFp0Xh8rSeV9-VgpNTCW2iDPd36sABZrGPqwj8oJkK&quot;\n</code></pre>\n<ul>\n<li><code>VzX3…</code> is the Authentication User ID (AUID).</li>\n<li><code>8x8H…</code> is the old Log-In Proof (LIP).</li>\n<li><code>S4GF…</code>, is a new <strong>Log-In Verification token (LIV)</strong>,\na MAC of the AUID keyed with the Log-In Proof (LIP).</li>\n<li>The LID is sent in the Date header, so that the website can store it.</li>\n</ul>\n<p>The website constructs the WUK as the MAC of the AUID keyed with its WK,\nand gets the UID as the MAC of the AUID keyed with the WUK.\nThen it validates the following:</p>\n<ol>\n<li>The LID must be within one minute of its known date.</li>\n<li>The old LIV must be the one associated with this UID as stored in database.</li>\n<li>Computing the MAC of the AUID keyed with the old LIP transmitted in the request,\nyields the old LIV stored in database.</li>\n</ol>\n<p>If the validation fails, the LogIn request is denied.\nThen, if both validated OK, it updates in database the sign-up Date and the new LIV.</p>\n<p>You may notice that neither the website,\nnor any eavesdropper with full read access to the website,\ncould guess the LIP until they see it in the Log In request.\nThus, they could not perform a Log In request;\nand when they see it in the HTTPS payload, it is too late to take advantage of it,\nas the LIV is updated with a new one for which they don’t have the LIP.</p>\n<p>The rest goes exactly like a Sign Up:</p>\n<pre><code>WWW-Authenticate: Identity v1 Key\n  kid=&quot;2020&quot;\n  auid=&quot;VzX3h8VumdWIY7MiUCcYwnS8kz9DxdtFzQftFhLvkFkK&quot;\n  lisk=&quot;zhgoQXVsATIUd-S2mB1gUlKi5yj_iO7K7KrsI_H8rBEK&quot;\n</code></pre>\n<ul>\n<li><code>Key</code> is the action instructing the browser to store the website’s key.</li>\n<li><code>2020</code> is the KID, placed first to ease inspection.</li>\n<li><code>VzX3…</code> is the AUID, identifying the user in all future requests.</li>\n<li><code>zhgo…</code> is the Log-In Shared Key (LISK), which will be used to prove that the user is who they claim to be.</li>\n</ul>\n<p>The browser stores the version (v1), the KID, the new LID and the LISK in its Sync feature.</p>\n<h3>Website key update</h3>\n<p>If the website worries its key may be compromised, it will rekey.\nHowever, it must keep all past keys, and accept all of them,\nso that users can authenticate even years after the last request.</p>\n<p>(The main point of rekeying is to migrate users to a key\nthat is not compromised, such that they don’t run the risk of being\nimpersonated if the website has futher severe security failures.)</p>\n<p>Once rekeyed, when the website receives an Auth request with an old key,\nit authenticates the request with the corresponding key and accepts the request,\nbut responds with a new Key action, similar to a sign-up:</p>\n<pre><code>WWW-Authenticate: Identity v1 Key\n  kid=&quot;2021&quot;\n  auid=&quot;VzX3h8VumdWIY7MiUCcYwnS8kz9DxdtFzQftFhLvkFkK&quot;\n  lisk=&quot;zhgoQXVsATIUd-S2mB1gUlKi5yj_iO7K7KrsI_H8rBEK&quot;\n</code></pre>\n<p>When receiving this, the browser updates its KID and LISK in its Sync storage for the website.\nIt then uses the new LISK on future authentications.</p>\n<p>As long as the website only performs the rekeying after they regained full access\nand ensured that their TLS connections were not (or no longer) compromised,\nthis sensitive transmission of a LISK should not be eavesdropped.\nAfter rekeying, they can therefore safely communicate to all customers\nthe need to log out and log back in.</p>\n<h3>Browser export</h3>\n<p>Browsers must provide a way to export the Browser Key to another browser.\nIt is recommended that the browser export format be encrypted with the user’s master password.\nAdditionally, any export event should be authenticated with a second factor.</p>\n<p>From just the BK, the new browser can perform the Log In procedure on all websites.</p>\n<h3>Account takeover or Browser Sync breach</h3>\n<p>When a user’s BK is leaked, the website owner (if customer service detects an account takeover)\nor browser (in the case of a breach of their Sync service)\nwill instruct the user to trigger the <strong>Browser Key Reset procedure</strong>.</p>\n<p>The browser must have a button in its UI (for instance, in the Sync Preferences page) triggering the procedure:</p>\n<p>First, it will create a new BK (say, <code>0dP_ocrzSwieAuLUNCD6P660HLLOGl9zyfxYwdSLI0kK</code>),\nbut keep the old BK around.</p>\n<p>Then, for each website for which the user has a LISK associated to the old BK,\nthe browser will make a ReSignUp request, very similar to a LogIn request:</p>\n<pre><code>Authorization: Identity v1 ReSignUp v1\n  oauid=&quot;VzX3h8VumdWIY7MiUCcYwnS8kz9DxdtFzQftFhLvkFkK&quot;\n  olip=&quot;R05PEuFZHCngevxsxJZsIDeJe66IDGYqoH3JBVtT-DcK&quot;\n  auid=&quot;yFvfOjHW68qyhMIPobZdL6oZmIIOD7aEVquwkkbbxS4&quot;\n  liv=&quot;yWPeXDGFi3q8ZAwVOAvbv5swl6oVoOScw7Y3CDVPQCM&quot;\n</code></pre>\n<ul>\n<li><code>ReSignUp</code> is a new action to instruct the website to reset the UIDs everywhere where it matters, and provide a new LISK.</li>\n<li><code>v1</code> means that the protocol used for the old IDs and tokens is v1. This is useful for the “Hash function theoretically broken” section.</li>\n<li><code>VzX3…</code> is the old Authentication User ID (AUID).</li>\n<li><code>R05P…</code> is the old Log-In Proof (LIP).</li>\n<li><code>yFvf…</code> is a new Authentication User ID (AUID).</li>\n<li><code>yWPe…</code>, is a new Log-In Verification token (LIV),\na MAC of the new AUID keyed with the new Log-In Proof (LIP).</li>\n<li>The new LID is sent in the Date header (<code>Fri, 03 Jul 2020 16:03:26 GMT</code>).</li>\n</ul>\n<p>The website treats it just like a LogIn request, except it also updates the UID in database.</p>\n<p>A Browser Sync breach would obviously be a major event.\nIn the old password world, it is equivalent to\nhaving the worldwide Google Chrome passwords leaked. It would cause all Chrome users\nto need to reset their passwords one by one on every website.</p>\n<p>Thankfully, with WebIdentity, this can be automated by the browser seamlessly.</p>\n<p>First, the browser will need to close the breach.\nThen, for each user, it will automatically trigger the Browser Key Reset procedure remotely.</p>\n<p>Obviously, just as with a Google Chrome password leak,\nadversaries could take control of user accounts by doing a ReSignUp on their behalf.\nWebIdentity is better in this respect: the browsers can automatically update information,\nleaving a small window for attackers to take over accounts;\nwhile a password leak may have users that take years to update a given password.</p>\n<p>Just as with passwords, it is recommended that browsers implement Sync\nin such a way that the user decypts Sync secrets on their machine\nthrough the use of a master password.\nAs a result, the Sync servers would only contain encrypted data without the key.\nObviously, even a leak of the mere encrypted data should trigger a ReSignUp,\nbut at least the risk of user account takeover would be greatly reduced.</p>\n<h3>Hash function theoretically broken</h3>\n<p>It took ten years from SHA-1 publication to full-round collisions.\nWhile SHA-2 has already survived twenty,\nit is plausible that it gets eventually broken theoretically.\nThat was the motivation for the SHA-3 process,\nwhich yielded a primitive seemingly likely to take even more time\nthan SHA-2 to get broken, thanks to its sponge construction.</p>\n<p>When SHA-2 gets theoretically broken,\nwe will release v2 of the protocol.\nBrowser vendors and website operators will need to implement it\nbefore it gets practically broken\n(which for SHA-1 took ten years).</p>\n<p>Websites supporting v2 must also support v1 for at least ten years,\nwhich ought to be enough time for browser vendors to implement v2.</p>\n<p>When browsers only support v1, and see support for v2 from a website,\nthey must send v1 requests, and the website must follow the v1 protocol.</p>\n<p>When browsers implement v2 and hold a v1 authentication AUID/LISK,\nthey must follow the Browser Key Reset procedure.</p>\n<h3>Threat models</h3>\n<ul>\n<li>Website attack:\n<ul>\n<li>From a third party:\n<ul>\n<li><strong>Replay attack</strong>: If they replay the encrypted request of an authenticated user within the 30-second window, they may trigger the corresponding action (eg. a bank transfer) twice. We recommend that websites implement idempotency checks, as this could also happen from network glitches.</li>\n<li>If they get <strong>read access to the website</strong> database, the UID gives no information that can be used to authenticate on behalf of the user.</li>\n<li>If they also compromise WK, the <strong>website key</strong>, they still lack the AUID (which is not stored) to be able to do anything.</li>\n<li>If they compromise the <strong>website’s TLS encryption</strong>, such as with the <a href=\"https://blog.cloudflare.com/incident-report-on-memory-leak-caused-by-cloudflare-parser-bug/\">CloudFlare memory leak</a>, they can read the encrypted payloads between the user and the website.\n<ul>\n<li>Reading the requests gives them a valid AUID/LID/TOTP set, but they only have a 30-second window (1 minute in rare worst-case clock drifts) to perform authenticated requests on behalf of the user, as they lack the LISK to be able to MAC new dates. They cannot issue a LogIn or ReSignUp request, lacking the LIP; and this remains true even if they additionally compromise the WK and database. Securitywise, this is a significant improvement compared to JWT, PASETO and similar session token approaches, which typically have anywhere from 5 minutes (for access tokens) to months of lifetime (for refresh tokens). An attacker reading a JWT refresh token in the encrypted payloads can typically use it to get unlimited access tokens for weeks if not ever. By contrast, with WebIdentity, the longest this attacker would be able to make authenticated queries is a minute, but usually half that (as most clients will not have much clock drift).</li>\n<li>They can also read SignUp requests, although those will be rarer. The response includes the LISK, letting them fabricate valid TOTPs past 30 seconds. However, it will be invalidated through automatic logout after up to one hour. LISKs older than one hour will be useless to an attacker. On the other hand, if they can read the TLS traffic on-the-fly, they can view the new LISKs. As long as they maintain this ability, they can authenticate on behalf of the user. The flaw must be fixed by the website, and all LIDs invalidated, forcing a re-login.</li>\n</ul>\n</li>\n<li>If they compromise both the <strong>website’s TLS encryption and its WK</strong>:\n<ul>\n<li>For each AUID/LID/TOTP they see in the encrypted traffic, if the LID is still valid, they can derive the current LISK, and with it, perform authenticated requests for up to one hour (after which the automatic logout will prevent that).</li>\n<li>Similarly, they can get the LISK from SignUps and LogIns. If they can read the traffic on-the-fly, they can see the new LISKs produced even after the one-hour logout. Again, the solution is to fix the flaw and invalidate the LIDs.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>From <strong>another website</strong>: knowledge of that website’s AUID is insufficient to guess other websites’ AUID (that requires knowing the BK), let alone the LISK (which requires that website’s WK).</li>\n<li>From the <strong>user</strong>: knowledge of the LISK is insufficient to guess WK, the Website Key, and therefore, to make authenticated requests on behalf of other users of the website. Additionally, even if they could, knowledge of other users’ AUID would be necessary, which requires knowing their BK.</li>\n<li>From the <strong>browser</strong>: since it has access to the Sync secrets, it can perform authenticated requests and account takeover for all its registered users. However, it cannot do so for users of other browsers, if their BK is not explicitly shared.</li>\n</ul>\n</li>\n<li>Browser attack:\n<ul>\n<li><strong>XSS</strong>: Since WebIdentity is controlled by the browser and has no JS integration, JS code cannot access secrets or perform authentication. All the exchanges and headers related to WebIdentity must be hidden from the page transparently. All same-origin requests are authenticated or not depending on whether the user has clicked the Log In button, and depending on the <a href=\"https://fetch.spec.whatwg.org/#ref-for-concept-request-credentials-mode\">credentials mode</a>. Cross-site requests comply with CORS. The Authorization and WWW-Authenticate headers already have the right protections in place.</li>\n<li>Browsers should never have BK on the device. They can store the websites’ KID, AUID and LISK. An attacker that gains access to the <strong>device’s permanent or memory storage</strong> will be unable to obtain the BK, and therefore sign up on new websites. They can however make authenticated requests on behalf of the user to websites in which they are signed up, for up to one hour after they lose access. It is therefore necessary for browsers to encrypt the Sync database (with the LISK) if they cache it locally, which is already the case. They should not use an encryption key that is common to multiple users (also already the case IIUC).</li>\n<li>The Operating System and the CPU, on the other hand, can obviously access the BK <strong>in memory</strong> and perform authenticated requests and account takeover on behalf of the user, but not of other users.</li>\n<li><strong>BK loss</strong>: the Browser Sync could experience complete loss of data, including the BK, maliciously or accidentally. The consequence would be the same as a password manager, today, losing the passwords (which indeed is the main thing it wishes to guarantee as a business), or a website using WebAuthn as only primary authentication and the user losing their device (Yubico etc.): users would no longer be able to log in. However, people that switched browsers or backed up their BK would be able to add it back in using the <em>Browser Export</em> procedure.</li>\n</ul>\n</li>\n</ul>\n<h3>Cryptographic comments</h3>\n<p>The whole scheme is both extremely inexpensive and simple to implement both for websites and browsers,\nespecially compared to current techniques (which involve, for instance, the expensive Argon2 for passwords).\nThe payload weigh is marginal.</p>\n<p>It also does not make use of public-key cryptography,\nwhich protects it from the threat of quantum computing advances.\nThe main impact might be longer hashes, although even that is in question.</p>\n<p>The protocol is versioned in such a way that there is no cryptographic algorithm agility,\nin line with common practices such as <a href=\"https://github.com/FiloSottile/age\">age</a> and <a href=\"https://paragonie.com/files/talks/NoWayJoseCPV2018.pdf\">PASETO</a>.</p>\n<p>The MAC algorithm for v1 of the protocol is HMAC-SHA256.</p>\n<p>(I would love to put BLAKE3 here, but some websites will object to a non-NIST-approved primitive.\nAnd SHA3 (with no HMAC!) would also be nice, I would love to argue for its use;\nbut it is true that some websites may have legacy and dependency constraints;\nand unlike WebAuthn, the goal of WebIdentity is to quickly get very widespread adoption\nas the primary authentication mechanism on the Web.)</p>\n<p>All <a href=\"https://tools.ietf.org/html/rfc4648#section-5\">base64url</a> inputs must be converted to a byte buffer prior to use.\nThe implementation should be constant-time.</p>\n<p>The eTLD+1 must be in ASCII punycode form for use in WebIdentity (simplifying debugging).</p>\n<h2>Vectors</h2>\n<p>The examples use:</p>\n<ul>\n<li>Website eTLD+1: <code>example.org</code>.</li>\n<li>BK: <code>GVr2rsMpdVKNMYkIohdCLhOeHSBIL8KBjoCvleDbsJsK</code> (generated with <code>head -c 32 &lt;/dev/urandom | base64 | tr +/ -_</code>).</li>\n<li>WK: <code>DCmk1xzu05QmT578_9QUSckIjCYRyr19W0bf0bMb46MK</code>.</li>\n<li>MACs generated with <code>echo -n &quot;$input&quot; | openssl sha256 -hmac &quot;$key&quot; | cut -f2 -d' ' | xxd -r -p | base64 | tr +/ -_ | tr -d =</code>.</li>\n</ul>\n<p>The script to generate the examples is available <a href=\"https://github.com/espadrine/espadrine.github.com/blob/master/blog/assets/webidentity/test-vectors.sh\">here</a>;\nrunning it yields all values used in examples.</p>\n<h2>Acknowledgements</h2>\n<p>Thanks go to /u/josejimeniz2 for considering the risk of Sync data loss,\nand to /u/haxelion for raising the risk of having the BK on the device\n(which is no longer the case in the current draft).</p>\n<h2>Comments and links</h2>\n<p><a href=\"https://www.reddit.com/r/espadrine/comments/hlrx40/webidentity_oneclick_passwordless_signups_logins/\">Blog comments here</a>.</p>\n<script type=\"application/ld+json\">\n{ \"@context\": \"http://schema.org\",\n  \"@type\": \"BlogPosting\",\n  \"datePublished\": \"2020-07-05T20:19:02Z\",\n  \"keywords\": \"crypto, web\" }\n</script>\n",
      },
      {
        "id":  "https://espadrine.github.io/blog/posts/memorable-passwords.html",
        "url": "https://espadrine.github.io/blog/posts/memorable-passwords.html",
        "title": "Memorable passwords",
        "tags": "crypto",
        "date_published": "2020-06-24T19:50:27Z"
        "content_html": "<h1>Memorable passwords</h1>\n<p>We are slowly getting to a comfortable password situation.</p>\n<p>Research has improved on which passwords are easier to remember.\nCryptographers have <a href=\"https://password-hashing.net/argon2-specs.pdf\">strenghtened the cost</a> of cracking weak passwords.\nPeople are more aware of the security risks,\nand the usage of password managers grows.</p>\n<p>The consensus on password handling is this:</p>\n<ol>\n<li>Keep a very strong master password in your head, stored nowhere.</li>\n<li>Use it to unlock your password manager.</li>\n<li>Use your password manager to store and create very random passwords for individual websites.\nYou would never be able to remember them, but you only need to remember the master password.\nTypically, for alphanumerical outputs, you need ⌈128÷log2(26·2+10)⌉ = 22 characters.</li>\n<li>The websites, and more importantly, the password manager,\nuse a key derivation function such as <a href=\"https://password-hashing.net/argon2-specs.pdf\">Argon2</a> either on the front-end\n(server relief) or on the backend, and only stores the output.\nIt ensures computation is both time-hard and memory-hard, with settings kept up-to-date\nto ensure that each computation takes 0.5 seconds and/or 4 GB of RAM.</li>\n</ol>\n<p>But some details are left unset: exactly how strong should the master password be?\nHow do we even know?\nCan this situation converge to an easier user experience for login on the Web?</p>\n<h2>Password hashing</h2>\n<p>Some accurate statements may be surprising to the general population.\nThis is one:</p>\n<p><strong>Multiple passwords can unlock your account.</strong></p>\n<p>The reason? Your password is not compared byte-for-byte (thankfully!)\nbut through a hashing method that does not map one-to-one.</p>\n<p>Indeed, hashes have fixed sizes (typically 256 bits),\nwhile passwords have arbitrary length.</p>\n<p>Overall, this consideration is unimportant,\nbecause virtually no password is strong enough\nto even compete with the collision risk of the hash:\nit is tremendously more likely for a collision to be caused by\nthe generation process, than by the hash,\nwhose collision risk is 2<sup>N÷2</sup>\nwhere N is the size of the hash, typically 256 bits nowadays.</p>\n<p>On top of this, some companies build their login system\nin a way that is more resilient to user error,\nsuch as <a href=\"https://www.zdnet.com/article/facebook-passwords-are-not-case-sensitive-update\">having caps lock on</a>.</p>\n<p>That too is irrelevant, since the search space is typically only reduced\nby one bit (corresponding to the choice between setting caps lock or not).</p>\n<h2>Target strength</h2>\n<p><a href=\"https://crypto.stackexchange.com/questions/60815/recommended-minimum-entropy-for-online-passwords-in-2018\">Some suggestions target specific cryptographic algorithms</a>.\nBut this pushes machine limits into human constraints:\nalgorithms require 128-bit security, not because 127 is not enough,\nbut because it is a power of two that neatly fits with various engineering techniques.</p>\n<p>The real human constraint is your lifetime.\nOnce you are dead, it does not matter too much to your brain whether your secrets are out,\nsince your brain becomes mulch.</p>\n<p>The longest person alive is a French woman that died nearly reaching 123.\nLet’s imagine that health will improve\nsuch that someone will live double that amount, Y = 246 years.\nWhat is the minimum strength needed to ensure they won’t have their secrets cracked alive?</p>\n<p>Current compute costs hover around €3/month on low-end machines.\nLet’s imagine that it will improve a hundredfold in the coming century.</p>\n<p>The NSA yearly budget is estimated at B = €10 billion.\nCan they hack you before you die?</p>\n<p>First, under those assumptions,\nassuming the NSA consumes its whole budget cracking you,\nhow many computers will it use to crack you in parallel?\nThe result is P = B ÷ 12 ÷ 0.03 = 28 billion servers.</p>\n<p>If your password has an N-bit entropy,\nit will take 2<sup>N-1</sup>·0.005÷P÷3600÷24÷365 years on average,\nassuming the NSA is brute-forcing with CPUs that can do one attempt every 5 milliseconds\n(a hundredth of the <a href=\"https://password-hashing.net/argon2-specs.pdf\">Argon2</a> recommended setting,\nto account for the possibility that the NSA has machines a hundred times more powerful\nthan the rest of us, which is both unlikely, and would not cost what we estimated).</p>\n<p>As a result, our formula for picking strength is\nN = log2(B÷12÷0.03 · Y·365·24·3600÷0.005) + 1 = 77 bits of security.</p>\n<p>Note that we can assume that a good KDF is used,\nsince we are only worried about password strength for the password manager,\nwhich should be pretty good at choosing the right design.\nThe password manager will generate all normal passwords above 128 bits of security anyway.\n(Except for those pesky websites that inexplicably have an upper password length limit.\nBut those are beyond saving.)</p>\n<p>I parameterized some values so that you can plug your own situation.\nFor instance, if you make a password for your startup\nthat you believe will beat the odds of an average 5-year lifespan,\nand become a behemoth a thousand years into the future, you can set Y = 1000\nand get a very slight increase to 79 bits.</p>\n<p>If you instead believe that your adversary will spend a trillion euros every year,\nyou can bump things up to 83 bits of security.</p>\n<h2>Master password generation</h2>\n<p>How do you convert a number of bits of security into a master password?\nWell, those bits represent the amount of entropy of the random generator.\nOr in other words, the quantity of uncertainty of the password-making process.</p>\n<p>Each bit represents one truly random choice between two options.\nIf you have four options, it is as if you made two choices, and so on.</p>\n<p>A good way to make memorable master passwords is to pick words among large dictionaries,\nsince picking from a long list adds a lot of entropy (since there are so many binary choices)\nbut each word is very distinctively evocative.</p>\n<p>However, each word is independent, and therefore,\nmaking stories in your head that combines those words gets harder the more words there are.\nSo we randomize the word separators as symbols,\nwhich both adds entropy (so that we can have less words),\nand is not too hard to remember. Besides, breaking words apart ensures that\nwe don’t lose entropy by ending up with two words that, concatenated,\nare actually a single word from the same dictionary.</p>\n<p>I implemented these principles on <a href=\"https://espadrine.github.io/passphrase/\">this passphrase generation page</a>.</p>\n<h2>Thank you, Next</h2>\n<p>I feel strongly that passwords are passé.\nI would love to talk about my hopes for the future of Web authentication.</p>\n<p><a href=\"https://www.reddit.com/r/programming/comments/hf63bp/generate_cryptographically_secure_passphrases_at/\">Reddit comments here</a>.\n<a href=\"https://news.ycombinator.com/item?id=23632533\">HN comments here</a>.</p>\n<script type=\"application/ld+json\">\n{ \"@context\": \"http://schema.org\",\n  \"@type\": \"BlogPosting\",\n  \"datePublished\": \"2020-06-24T19:50:27Z\",\n  \"keywords\": \"crypto\" }\n</script>\n",
      },
      {
        "id":  "https://espadrine.github.io/blog/posts/shishua-the-fastest-prng-in-the-world.html",
        "url": "https://espadrine.github.io/blog/posts/shishua-the-fastest-prng-in-the-world.html",
        "title": "SHISHUA: The Fastest Pseudo-Random Generator In the World",
        "tags": "prng crypto",
        "date_published": "2020-04-18T16:59:00Z"
        "content_html": "<h1>SHISHUA: The Fastest Pseudo-Random Generator In the World</h1>\n<p><em>(TLDR: see the <a href=\"#benchmark\">benchmark</a> and the <a href=\"https://github.com/espadrine/shishua\">code</a>.)</em></p>\n<p>Six months ago, I wanted to make the best PRNG with an unconventional design,\nwhatever that design may be.\nI expected it to start easy, and slowly get harder;\nI wondered whether I would learn fast enough to pass the highest bar.</p>\n<p>Surprisingly, difficulty did not increase linearly.\nPassing the bytewise Chi-Squared tests was very hard!</p>\n<p>Then, when I got the concepts, passing dieharder was also very hard.\nWhen I got to that point, I was honestly so extatic,\nthat <a href=\"https://mobile.twitter.com/espadrine/status/1184542865969614849\">I published what I got</a> to learn what the next challenge needed to be.\nBut it turned out <a href=\"https://mobile.twitter.com/espadrine/status/1184883565634424832\">it failed PractRand</a>.</p>\n<p>Then, <a href=\"https://mobile.twitter.com/espadrine/status/1186358084425400320\">passing BigCrush</a> was very hard.</p>\n<p>Then, passing 32 tebibytes of PractRand was very hard.</p>\n<p>But once I reached that point, I realized that speed was going to be an issue.\nIt wasn’t just about having a construction that emitted ten megabytes a second, taking a month to pass PractRand.</p>\n<p>But I have to admit, <a href=\"https://github.com/espadrine/combit\">passing PractRand at a gigabyte a second</a> was very hard.</p>\n<p>Once you get there… what you really want to see is whether you can reach the Pareto frontier.</p>\n<p>You want the fastest PRNG in the world that beats the hardest statistical tests.</p>\n<p>I got there.</p>\n<p>In <a href=\"https://espadrine.github.io/blog/posts/a-primer-on-randomness.html\">the previous entry to the series</a>, I explained all the things I learnt to reach it.\nHere, I’ll detail how the winning design works.</p>\n<h2>Target</h2>\n<p>Let’s start with the obvious: <strong>speed is platform-dependent</strong>.\nI focused my optimization on the modern x86-64 architecture (so, Intel and AMD chips).</p>\n<p>The classic metric used to compare performance there is <strong>cpb</strong>:\nthe number of CPU cycles spent to generate a byte of output.\nAll cryptographic papers <a href=\"https://bench.cr.yp.to/supercop.html\">compute and compare that metric</a>.\nA slightly lower cpb, in software or hardware, can weigh in the balance\njust enough to make a primitive win a competition,\nor become widely used by the major websites of the world.</p>\n<p>To improve your cpb, you can do three things:</p>\n<ol>\n<li>Generate more bytes for the same amount of work, or</li>\n<li>Do less work to generate the same amount of bytes, or</li>\n<li>Parallelize work.</li>\n</ol>\n<p>We will do all of the above.</p>\n<p>Therefore, to boot with point 1, we need to output more bits on each iteration.</p>\n<p>I am worried that people might say,\n“this is not a PRNG unless it outputs 32-bit numbers,” or “64-bit numbers”.\nOr more generally, “PRNGs must only rely on this subset of x86-64”;\nas if some instructions, such as <code>POPCNT</code>, or some registers, such as <code>%xmm7</code>, are off-limits.</p>\n<p>But PRNGs are engineering: they try to make the best of the CPU, decade after decade!\nThey relied on <code>ROL</code> when it came, and on <code>%rax</code> when 64-bit CPUs landed.\nSure, it means that this algorithm might be slower on ARM (although that remains to be seen);\nbut 64-bit PRNGs were heavily used before 2019’s Android switch to a required 64-bit support!</p>\n<p>So things evolve with the hardware.\nAnd today, Intel and AMD CPUs support 256-bit operations through <a href=\"https://software.intel.com/en-us/articles/how-intel-avx2-improves-performance-on-server-applications\">AVX2</a>.</p>\n<p>Just like RC4 outputs 1 byte, and drand48 can only output 4 at a time;\njust like pcg64 can only output 8 at a time;\nwe will output 32 bytes at a time.</p>\n<p>Obviously, while 8 bytes could be output as a 64-bit number,\nwhich most programming languages have a built-in type for,\nfew have a type for 16 bytes (C’s <a href=\"https://gcc.gnu.org/onlinedocs/gcc/_005f_005fint128.html\"><code>__uint128_t</code></a> being a notable exception);\nfewer yet have one for 32 bytes (aside from intrinsics).</p>\n<p>So we must say goodbye to the typical PRNG function prototype\n(here taken from Vigna’s <a href=\"http://xoshiro.di.unimi.it/hwd.c\">HWD</a> benchmark program):</p>\n<pre><code>static uint64_t next(void);\n</code></pre>\n<p>Instead, we can have the generator take a buffer to fill\n(here taken from <a href=\"https://github.com/espadrine/shishua/blob/master/prng.c\">my own benchmark program</a>):</p>\n<pre><code>void prng_gen(prng_state *s, __uint64_t buf[], __uint64_t size);\n</code></pre>\n<p>Are there disadvantages?</p>\n<p>Well, if your generator outputs 32 bytes at a time,\nyou need the consumer to give an array that is a multiple of 32 bytes;\nideally, an array aligned to 32 bytes.</p>\n<p>Although, with a tiny bit more work, you don’t.\nJust fill a buffer. Output from it what has not been consumed;\nrefill it as needed.</p>\n<p>That does make <em>latency</em> unpredictable: some calls will only read the buffer.\nBut it averages out the same.</p>\n<p>So now we generate more bytes for the same amount of work.\nNext step: how do we parallelize work?</p>\n<h2>Parallelism</h2>\n<p>The CPU offers an incredible wealth of parallelism at every level.</p>\n<p>First, of course, are the SIMD instructions (Single-Instruction, Multiple Data).\nFor instance, AVX2 does four 64-bit additions in parallel, or eight 32-bit ones, etc.</p>\n<p>In cryptography, it has been severely relied upon for fifteen years.\nNotably, <a href=\"https://github.com/floodyberry/supercop/tree/master/crypto_stream/chacha20/dolbeau/amd64-avx2\">ChaCha20</a> gains an incredible amount of speed from it;\nmost important primitives that don’t use AESNI rely on that.\nFor instance, <a href=\"https://norx.io/data/norx.pdf\">NORX</a> and <a href=\"https://cryptojedi.org/papers/gimli-20170627.pdf\">Gimli</a> are designed with that in mind.</p>\n<p>Recently, there has been increasing interest in the non-cryptographic PRNG community.</p>\n<p>In particular, existing primitives not designed for SIMD can be the basis\nfor building a very fast PRNG.</p>\n<p>For instance, Sebastiano Vigna, while pushing for his <a href=\"http://prng.di.unimi.it/#speed\">xoshiro256++</a> design\nin the Julia programming language’s standard library,\n<a href=\"https://github.com/JuliaLang/julia/issues/27614#issuecomment-548154730\">learnt</a> that concatenating the output of eight concurrent instances of the PRNG\ninitialized differently, was made very fast by having each operation of the design\nperformed simultaneously on each PRNG.</p>\n<p>SIMD is one level of CPU parallelism, but not the only one.\nI encourage you to read <a href=\"https://espadrine.github.io/blog/posts/a-primer-on-randomness.html\">the previous article on the subject</a>\nto get a better picture, but I’ll mention what I relied upon.</p>\n<p><strong>CPU pipelining</strong> processes multiple instructions at different stages of processing.\nWhen well-ordered to limit interstage dependencies, instructions can be processed faster.</p>\n<p><strong>Superscalar execution</strong> makes the computation part of instruction happen in parallel.\nBut they must have no read/write dependencies to do so.\nWe can fit the design to reduce the risk of stalls,\nby making the write part happen long before the read.</p>\n<p><strong>Out-of-order execution</strong> lets the processor execute instructions that happen later,\neven though a previous instruction is not yet done, if the later instruction has no\nread/write dependency to it.</p>\n<p>All right, let’s dig our hands into the implementation!</p>\n<h2>Design</h2>\n<p>Let’s walk through the design of something we will call SHISHUA-half,\nfor reasons that will slowly become obvious along the article.</p>\n<p>It looks like this:</p>\n<p><img src=\"../assets/shishua-the-fastest-prng-in-the-world/shishua-diagram.svg\" alt=\"SHISHUA diagram\" /></p>\n<p>Let’s dive in line by line.</p>\n<pre><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">prng_state</span> {</span>\n  __m256i state[<span class=\"hljs-number\">2</span>];\n  __m256i output;\n  __m256i counter;\n} prng_state;\n</pre>\n<p>Our state is cut in two pieces that both fit in an AVX2 register (256 bits).\nWe keep output around in the state to get a bit of speed,\nbut it is not actually part of the state.</p>\n<p>We also have a 64-bit counter; it is also an AVX2 register to ease computation.\nIndeed, AVX2 has a bit of a quirk where regular registers (<code>%rax</code> and the like)\ncannot directly be transfered to the SIMD ones with a <code>MOV</code>;\nit must go through RAM (typically the stack), which costs both latency and\ntwo CPU instructions (<code>MOV</code> to the stack, <code>VMOV</code> from the stack).</p>\n<p>We’re now going to look at generation.\nWe start by loading everything, then we loop over the buffer,\nfilling it up by 32 bytes at each iteration.</p>\n<pre><span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">prng_gen</span><span class=\"hljs-params\">(prng_state *s, <span class=\"hljs-keyword\">__uint64_t</span> buf[], <span class=\"hljs-keyword\">__uint64_t</span> size)</span> </span>{\n  __m256i s0 = s-&gt;state[<span class=\"hljs-number\">0</span>], counter = s-&gt;counter,\n          s1 = s-&gt;state[<span class=\"hljs-number\">1</span>],       o = s-&gt;output;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">__uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i += <span class=\"hljs-number\">4</span>) {\n    _mm256_storeu_si256((__m256i*)&amp;buf[i], o);\n    <span class=\"hljs-comment\">// …</span>\n  }\n  s-&gt;state[<span class=\"hljs-number\">0</span>] = s0; s-&gt;counter = counter;\n  s-&gt;state[<span class=\"hljs-number\">1</span>] = s1; s-&gt;output  = o;\n}\n</pre>\n<p>Since the function is inlined, the buffer being immediately filled at the start\nlets the CPU execute the instructions that depend on it in the calling function right away,\nthrough out-of-order execution.</p>\n<p>Inside the loop, we perform three operations on the state in rapid succession:</p>\n<ol>\n<li><strong>SHI</strong>ft</li>\n<li><strong>SHU</strong>ffle</li>\n<li><strong>A</strong>dd</li>\n</ol>\n<p>Hence the name, SHISHUA!</p>\n<h3>First, the shift</h3>\n<pre>u0 = _mm256_srli_epi64(s0, <span class=\"hljs-number\">1</span>);              u1 = _mm256_srli_epi64(s1, <span class=\"hljs-number\">3</span>);\n</pre>\n<p>AVX2 does not support rotations, sadly.\nBut I want to entangle bits from one position in the 64-bit numbers,\nto other bit positions! And shift is the next best thing for that.</p>\n<p>We must shift by an odd number so that each bit reaches all 64-bit positions,\nand not just half.</p>\n<p>Shift loses bits, which removes information from our state.\nThat is bad, so we minimize the loss: the smallest odd numbers are 1 and 3.\nWe use different shift values to increase divergence between the two sides,\nwhich should help lower the similarity of their self-correlation.</p>\n<p>We use rightward shift because the rightmost bits have the least diffusion in addition:\nthe low bit of <code>A+B</code> is just a XOR of the low bits of <code>A</code> and <code>B</code>, for instance.</p>\n<h3>Second, the shuffle</h3>\n<pre>t0 = _mm256_permutevar8x32_epi32(s0, shu0); t1 = _mm256_permutevar8x32_epi32(s1, shu1);\n</pre>\n<p>We use a 32-bit shuffle because it is the only one that is both a different granularity\nthan the 64-bit operations that we do everywhere else (which breaks 64-bit alignment),\nand that can also cross lanes\n(other shuffles can only move bits within the left 128 bits if they started on the left,\nor within the right 128 bits if they started on the right).</p>\n<p>Here are the shuffle constants:</p>\n<pre>__m256i shu0 = _mm256_set_epi32(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>),\n        shu1 = _mm256_set_epi32(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>);\n</pre>\n<p>To make the shuffle really strenghten the output, we move weak (low-diffusion) 32-bit parts\nof the 64-bit additions to strong positions, so that the next addition will enrich it.</p>\n<p>The low 32-bit part of a 64-bit chunk never moves to the same 64-bit chunk as its high part.\nThat way, they do not remain in the same chunk, encouraging mixing between chunks.</p>\n<p>Each 32-bit part eventually reaches all positions circularly: A to B, B to C, … H to A.</p>\n<p>You might notice that the simplest shuffle that follows all those requirements\nare simply those two 256-bit rotations (rotation by 96 bits and 160 bits rightward, respectively).</p>\n<h3>Third, the addition</h3>\n<p>Let’s add 64-bit chunks from the two temporary variables,\nthe shift one and the shuffle one, together.</p>\n<pre>s0 = _mm256_add_epi64(t0, u0);              s1 = _mm256_add_epi64(t1, u1);\n</pre>\n<p>The addition is the main source of diffusion: it combines bits\ninto irreducible combinations of XOR and AND expressions across 64-bit positions.</p>\n<p>Storing the result of the addition in the state keeps that diffusion permanently.</p>\n<h3>Output function</h3>\n<p>So, where do we get the output from?</p>\n<p>Easy: the structure we built is laid out in such a way that\nwe are growing two independent pieces of state: <code>s0</code> and <code>s1</code>,\nwhich never influence each other.</p>\n<p>So, we XOR them, and get something very random.</p>\n<p>In fact, to increase the independence between the inputs that we XOR,\nwe take the partial results instead: the shifted piece of one state,\nand the shuffled piece of the other.</p>\n<pre><code>o = _mm256_xor_si256(u0, t1);\n</code></pre>\n<p>That also has the effect of reducing the read/write dependencies between superscalar CPU instructions,\nas <code>u0</code> and <code>t1</code> are ready to be read before <code>s0</code> and <code>s1</code> are.</p>\n<p>You may have noticed that we did not talk about the counter yet.\nIt turns out we handle it at the start of the loop.\nWe first change the state, and then increment the counter:</p>\n<pre>s1 = _mm256_add_epi64(s1, counter);\ncounter = _mm256_add_epi64(counter, increment);\n</pre>\n<p>The reason we change the state first, and then update the counter,\nis so that <code>s1</code> becomes available sooner,\nreducing the risk that later instructions that will read it get stalled\nin the CPU pipeline.\nIt also avoids a direct read/write dependency on the counter.</p>\n<p>The reason we apply the counter to s1 and not s0,\nis that both affect the output anyway.\nHowever, <code>s1</code> loses more bits from the shift,\nso this helps it get back on its feet after that harmful shearing.</p>\n<p>The counter is not necessary to beat PractRand.\nIts only purpose is to set a lower bound of 2<sup>69</sup> bytes = 512 EiB\nto the period of the PRNG:\nwe only start repeating the cycle after one millenia at 10 GiB/s,\nwhich is unlikely to ever be too low for practical applications in the coming centuries.\nThanks to this, there are no bad seeds.</p>\n<p>Here are the increments:</p>\n<pre>__m256i increment = _mm256_set_epi64x(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>);\n</pre>\n<p>The increments are picked as odd numbers,\nsince only coprimes of the base cover the full cycle of the finite field GF(2<sup>64</sup>),\nand all odd numbers are coprime of 2.</p>\n<p>(In other words, if you increment by an even number between integers 0 to 4,\nwrapping around to 0 when you go past 4,\nyou get the sequence 0-2-0-2-…, which never outputs 1 or 3;\nbut an odd increment goes through all integers.)</p>\n<p>We use a different odd number of each 64-bit number in the state,\nwhich makes them diverge more, and adds a tiny bit of stirring.</p>\n<p>I picked the smallest odd numbers so that they don’t look like magic numbers.</p>\n<p>So, there we go! That is how the state transition and output function work.</p>\n<p>Now, how do we initialize them?</p>\n<h3>Initialization</h3>\n<p>We initialize the state with the hex digits of Φ,\nthe irrational number that is least approximable by a fraction.</p>\n<pre><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">__uint64_t</span> phi[<span class=\"hljs-number\">8</span>] = {\n  <span class=\"hljs-number\">0x9E3779B97F4A7C15</span>, <span class=\"hljs-number\">0xF39CC0605CEDC834</span>, <span class=\"hljs-number\">0x1082276BF3A27251</span>, <span class=\"hljs-number\">0xF86C6A11D0C18E95</span>,\n  <span class=\"hljs-number\">0x2767F0B153D27B7F</span>, <span class=\"hljs-number\">0x0347045B5BF1827F</span>, <span class=\"hljs-number\">0x01886F0928403002</span>, <span class=\"hljs-number\">0xC1D64BA40F335E36</span>,\n};\n</pre>\n<p>We take a 256-bit seed, which is common in cryptography,\nand doesn’t really hurt in non-cryptographic PRNGs:</p>\n<pre><span class=\"hljs-function\">prng_state <span class=\"hljs-title\">prng_init</span><span class=\"hljs-params\">(SEEDTYPE seed[<span class=\"hljs-number\">4</span>])</span> </span>{\n  prng_state s;\n  <span class=\"hljs-comment\">// …</span>\n  <span class=\"hljs-keyword\">return</span> s;\n}\n</pre>\n<p>We don’t want to override a whole piece of state (<code>s0</code> nor <code>s1</code>) with the seed;\nwe only want to affect half.\nThat way, we avoid having debilitating seeds that,\npurposefully or accidentally, set the state to a known weak start.</p>\n<p>With half of each state intact, they still keep control over 128 bits of state,\nwhich is enough entropy to start and stay strong.</p>\n<pre>s.state[<span class=\"hljs-number\">0</span>] = _mm256_set_epi64x(phi[<span class=\"hljs-number\">3</span>], phi[<span class=\"hljs-number\">2</span>] ^ seed[<span class=\"hljs-number\">1</span>], phi[<span class=\"hljs-number\">1</span>], phi[<span class=\"hljs-number\">0</span>] ^ seed[<span class=\"hljs-number\">0</span>]);\ns.state[<span class=\"hljs-number\">1</span>] = _mm256_set_epi64x(phi[<span class=\"hljs-number\">7</span>], phi[<span class=\"hljs-number\">6</span>] ^ seed[<span class=\"hljs-number\">3</span>], phi[<span class=\"hljs-number\">5</span>], phi[<span class=\"hljs-number\">4</span>] ^ seed[<span class=\"hljs-number\">2</span>]);\n</pre>\n<p>Then we do the following thing a <code>ROUNDS</code> number of times:</p>\n<ol>\n<li>Run <code>STEPS</code> iterations of SHISHUA,</li>\n<li>Set one piece of the state to the other, and the other to the output.</li>\n</ol>\n<pre><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">char</span> i = <span class=\"hljs-number\">0</span>; i &lt; ROUNDS; i++) {\n  prng_gen(&amp;s, buf, <span class=\"hljs-number\">4</span> * STEPS);\n  s.state[<span class=\"hljs-number\">0</span>] = s.state[<span class=\"hljs-number\">1</span>];\n  s.state[<span class=\"hljs-number\">1</span>] = s.output;\n}\n</pre>\n<p>Setting to the output increases the diffusion of the state.\nIn the initialization, the added work and state correlation don’t matter,\nsince this is only done a few times, once.\nYou only care about diffusion in initialization.</p>\n<p>I picked values of 5 for <code>STEPS</code> and 4 for <code>ROUNDS</code>\nafter looking at how much they impacted seed correlation.</p>\n<p>(I computed seed correlation by counting the “unusual” and “suspicious” anomalies\ncoming out of the PractRand PRNG quality tool.)</p>\n<h2>Performance</h2>\n<p>Speed measurement benchmarks are tricky for so many reasons.</p>\n<ul>\n<li><strong>Clock</strong> measurements can lack precision.</li>\n<li>The CPU has so much <strong>parallelism</strong>, that tracking when instructions start and end,\nis both nondeterministic and heavily dependent on other events on the CPU.</li>\n<li>Obviously, from one CPU vendor to the next, the resuts will be different.\nThat is also true from one CPU <strong>series</strong> to the next from the same vendor.</li>\n<li>CPUs nowadays have <strong><a href=\"https://www.intel.com/content/www/us/en/architecture-and-technology/turbo-boost/turbo-boost-technology.html\">variable frequency</a></strong>: they get purposefully slower or faster\ndepending on the need for low power consumption or the risk of high temperature.</li>\n</ul>\n<p>I use a dedicated CPU instruction, <code>RDTSC</code>, which computes the number of cycles.</p>\n<p>To make sure that everyone can reproduce my results, I use a cloud virtual machine.\nIt doesn’t change the order of the benchmark results compared to a local test;\nit also avoids requesting that other people buy the same computer as the one I have.\nFinally, there are many use-cases where PRNGs would be used in the cloud on those instances.</p>\n<p>I chose Google Cloud Platform’s N2 (Intel chip) and N2D (AMD chip).\nThe advantage of GCP is that they have chips from both vendors.\nWe’ll focus on Intel here, but the orders of magnitude are similar for AMD.</p>\n<p>To give a bit of context, let’s first look at an old cryptographic generator, RC4.\nImpossible to parallelize; I got <strong>7.5 cpb</strong> (cycles spent per generated byte).</p>\n<p>Now, let’s look at a very common and fast MCG: <a href=\"https://lemire.me/blog/2019/03/19/the-fastest-conventional-random-number-generator-that-can-pass-big-crush/\">Lehmer128</a>,\nthe simplest PRNG that passes BigCrush: <strong>0.44 cpb</strong>. Wow, not bad!</p>\n<p>For kicks, let’s make another detour through modern cryptographic designs.\nThey rely on a lot of the tricks that we saw.\nTake ChaCha8 for instance.\nIt reaches… <strong>0.46 cpb</strong>! About the same as the really fast one we just saw!</p>\n<p>SIMD really works its magic!</p>\n<p>To the cryptographic community, <a href=\"https://twitter.com/hashbreaker/status/1023965175219728386\">this is not a complete surprise</a>.\nChaCha8 is just insanely easy to parallelize.\nIt is just a counter in a diffused state, well-hashed.</p>\n<p>Next, a recent mixer that is the basis for fast hash tables: <a href=\"https://github.com/wangyi-fudan/wyhash/blob/master/wyhash_v6.h\">wyrand</a>.\n<strong>0.41 cpb</strong>, slightly better!</p>\n<p>Among Vigna’s fast PRNG, some don’t pass 32 TiB of PractRand, but are very fast.\n<a href=\"http://prng.di.unimi.it/xoshiro256plus.c\">Xoshiro256+</a> fails at 512 MiB but is among the fastest of the bunch: <strong>0.34 cpb</strong>.</p>\n<p>Let’s look at a recent entry, from earlier this year: <a href=\"http://www.romu-random.org/\">RomuTrio</a>.\nIt claims the title of fastest PRNG in the world: <strong>0.31 cpb</strong>.</p>\n<p>Alright, enough. How does SHISHUA-half fare?</p>\n<p><strong>0.14 cpb</strong>. Twice as fast as RomuTrio.</p>\n<p><img src=\"../assets/shishua-the-fastest-prng-in-the-world/speed-partial.svg\" alt=\"Speed plot\" /></p>\n<p>Given its quality, it is unmatched.</p>\n<p>But remember how the Julia team looked at\ncombining multiple instances of Vigna’s design\nto make a fast SIMD PRNG?\nLet’s look at Vigna’s fastest result using this technique:\n<a href=\"http://prng.di.unimi.it/#speed\">Xoshiro256+ 8 times</a>. <strong>0.07 cpb</strong>!</p>\n<p>(Technically, it varies on the machine;\non my laptop, SHISHUA-half is faster than this.)</p>\n<hr />\n<p>Sure, the resulting meta-PRNG (which I dub Xoshiro256+x8)\nhas <em>terrible statistical biases</em> that fail many simple tests.</p>\n<p>But, let’s beat its speed anyway, without betraying our high quality standards.</p>\n<p>Now you probably guess why we called our earlier primitive SHISHUA-half.</p>\n<p>It turns out getting twice as fast is easy by doubling SHISHUA-half.</p>\n<p>Similar to the Julia insights, we have two PRNGs initialized differently\n(four blocks of 256-bit state),\noutputting their thing one after the other.</p>\n<p>But with more state, we can output even more stuff,\nby combining the four states pairwise:</p>\n<pre>o0 = _mm256_xor_si256(u0, t1);\no1 = _mm256_xor_si256(u2, t3);\no2 = _mm256_xor_si256(s0, s3);\no3 = _mm256_xor_si256(s2, s1);\n</pre>\n<p>And that is how you get SHISHUA, and its <strong>0.06 cpb</strong> speed.</p>\n<p>Five times faster than the previously-fastest in the world\nthat passes 32 TiB of PractRand.\nYou can barely see it in the graph, so I removed RC4.</p>\n<p><img src=\"../assets/shishua-the-fastest-prng-in-the-world/speed.svg\" alt=\"Speed plot\" /></p>\n<p>I guess my point is that it is somewhat competitive.</p>\n<p>(In fact, it is even faster on my laptop, at 0.03 cpb,\nbut I want to stick to my benchmark promises.\nMaybe we lose a tiny bit of performance on early AVX-512 CPUs.)</p>\n<p>Hopefully, SHISHUA stays the fastest in the world for at least a few weeks?\n(Please make it so.)</p>\n<h2>Quality</h2>\n<p>It passes BigCrush and 32 TiB of PractRand without suspicion.</p>\n<p>In fact, all of its four outputs do.</p>\n<p>One of the not-ideal aspects of the design is that SHISHUA is <strong>not reversible</strong>.</p>\n<p>You can see this with a reduction to a four-bit state, with <code>s0 = [a, b]</code> and <code>s1 = [c, d]</code>.\nThe shift will yield <code>[0, a]</code> and <code>[0, d]</code>; the shuffle will give <code>[b, c]</code> and <code>[d, a]</code>.</p>\n<p>The new <code>s0</code> is <code>[b, c] + [0, a] = [b⊕(a∧c), a⊕c]</code>, and <code>s1</code> is <code>[d, a] + [0, c] = [d⊕(a∧c), a⊕c]</code>.</p>\n<p>If <code>a = ¬c</code>, then <code>a⊕c = 1</code> and <code>a∧c = 0</code>, thus <code>s0 = [b, 1]</code> and <code>s1 = [d, 1]</code>.\nSo there are two combinations of <code>a</code> and <code>c</code> that give the same final state.</p>\n<p>It is not an issue in our case, because the 64-bit counter is also part of the state.\nSo you have a minimum cycle of 2⁷¹ bytes (128 bytes per state transition),\nwhich lasts seven millenia at 10 GiB/s.\nSo that counterbalances the lost states.</p>\n<p>Besides, even despite the irreversibility,\nthe average state transition period is <code>2^((256+1)÷2)</code>.\nThat gives an average cycle of 2¹³⁵ bytes\n(more than a trillion times the age of the universe to reach at 10 GiB/s).\nAlthough, in my opinion, average cycles are overrated,\nas they give no indication on the quality of the output.</p>\n<p>Alright, here is the distilled benchmark:</p>\n<table id=benchmark>\n  <tr><th>Name   <th>Performance <th>Quality <th>Seed correlation\n  <tr><td>SHISHUA       <td>0.06 <td>>32 TiB <td> >32 TiB\n  <tr><td>xoshiro256+x8 <td>0.07 <td>  1 KiB <td>   0 KiB\n  <tr><td>RomuTrio      <td>0.31 <td>>32 TiB <td>   1 KiB\n  <tr><td>xoshiro256+   <td>0.34 <td>512 MiB <td>   1 KiB\n  <tr><td>wyrand        <td>0.41 <td>>32 TiB <td>  32 KiB\n  <tr><td>Lehmer128     <td>0.44 <td>>32 TiB <td>   1 KiB\n  <tr><td>ChaCha8       <td>0.46 <td>>32 TiB?<td> >32 TiB?\n  <tr><td>RC4           <td>8.06 <td>  1 TiB <td>   1 KiB\n</table>\n<ol>\n<li><strong>Performance</strong>: in number of CPU cycles spent per byte generated,\non N2 GCP instances. On N2D (AMD), the order is the same.</li>\n<li><strong>Quality</strong>: level at which it fails PractRand. We show a <code>&gt;</code> if it did not fail.\nWe put a question mark if we have not proved it.</li>\n<li><strong>Seed correlation</strong>: PractRand on interleaving of bytes from eight streams\nwith seeds 1, 2, 4, 8, 16, 32, 64, 128.\nWe use PractRand with folding 2 and expanded tests.</li>\n</ol>\n<p>Speed measurement is traditionally in cpb.\nGiven the speed we get to nowadays,\na more appropriate measurement is in number of bits generated per CPU cycle.\nNot only do I find it easier to grasp,\nit is also much easier to compare huge differences on the graph:</p>\n<p><img src=\"../assets/shishua-the-fastest-prng-in-the-world/speed-total.svg\" alt=\"Speed plot\" /></p>\n<h2>Next</h2>\n<p>While there are no practical issue with irreversibility in our case,\nit also means that we can improve on SHISHUA.</p>\n<p>My ideal PRNG would have the following properties:</p>\n<ol>\n<li><strong>The state transition is a circular permutation</strong>, giving a way-more-than-enough 2¹⁰²⁴ bytes cycle.\nAs in, it would take more than 10²⁸² times the age of the universe to reach the end at 10 GiB/s,\ninstead of SHISHUA’s seven millenia.\nIt is not exactly “better” (impossible is impossible);\nbut if we can reduce the design to a smaller state without affecting diffusion,\nwe might be able to get a faster PRNG.\nDo you think we might be able to fit one in ARM’s 128-bit NEON registers?\nAlso, we would no longer need the counter, removing two additions.</li>\n<li><strong>The output function is provably irreversible</strong>.\nThe way SHISHUA XORs two independent numbers already has that property,\nbut I haven’t proved that the numbers are truly decorrelated.</li>\n<li><strong>The state initialization is irreversible</strong>\nwith each state having 2¹²⁸ possible seeds (to prevent guessing the seed).\nThe way SHISHUA sets the state to its own output is likely irreversible.\nAfter all, it uses SHISHUA’s state transition (partially irreversible)\nand its output function (seemingly irreversible, see point 2).</li>\n<li><strong>The state initialization has perfect diffusion</strong>:\nall seed bits affect all state bits with equal probability.\nI’d like to compute that for SHISHUA.</li>\n</ol>\n<p>One issue holding back PRNGs and cryptography overall is the lack of better, general-purpose tooling.</p>\n<p>I want a tool that can instantly give me an accurate score,\nallowing me to compare designs on the spot.</p>\n<p>PractRand is great compared to what came before it; but:</p>\n<ul>\n<li>It cannot rate high-quality generators, making comparisons between them impossible.\nWe just get to say “well, they both had no anomalies after 32 TiB…”</li>\n<li>It takes weeks to run…</li>\n</ul>\n<p>I believe great improvements are coming.</p>\n<hr />\n<p>Discussions on\n<a href=\"https://www.reddit.com/r/prng/comments/g3nh4i/shishua_the_fastest_prng_in_the_world/\">Reddit</a>\nand\n<a href=\"https://news.ycombinator.com/item?id=22907539\">Hacker News</a>\n.</p>\n<script type=\"application/ld+json\">\n{ \"@context\": \"http://schema.org\",\n  \"@type\": \"BlogPosting\",\n  \"datePublished\": \"2020-04-18T16:59:00Z\",\n  \"keywords\": \"prng, crypto\" }\n</script>\n",
      },
      {
        "id":  "https://espadrine.github.io/blog/posts/a-primer-on-randomness.html",
        "url": "https://espadrine.github.io/blog/posts/a-primer-on-randomness.html",
        "title": "A Primer On Randomness",
        "tags": "prng crypto",
        "date_published": "2020-03-27T15:17:57Z"
        "content_html": "<h1>A Primer On Randomness</h1>\n<p>Last October, during a one-week hiking holiday in the birthplace of alpinism,\nI got particularly interested in random generators.</p>\n<p>Four reasons why they are fascinating:</p>\n<ol>\n<li>It is only once you track it that you realize just in which gargatuan proportions you <strong>exude information</strong>. Even tiny systems that encode very little data and whose entire purpose is to never leak it (ie, random generators), do so in ways that can be measured, and even exploited. In every instant of your life, during every interaction with someone, billions of muscle movements, tiny and large, only occur because of past events burnt into your brain’s circuits, and betray this private history. Given enough of it, an aggregator could rewind the world and extract minute details from the past.</li>\n<li>All of <strong>symmetric cryptography</strong> completely hinges on randomness. Security proofs fully rely on the analysis of how little information you can extract from a stream, which requires the stream to effectively look random.</li>\n<li>Studying them, and trying your hand at making them, helps you understand the <strong>scientific method</strong> better. Most real-world principles can never be proved with absolute certainty; you need to accurately detect a signal in the noise, and measure the likelihood that this signal is not just you seeing patterns in the static.</li>\n<li>Finally, it helps both understand <strong>the virtue of mixing</strong>, and how best to stir. The effect of mixing is exponential, which is unnatural to mentally harness. On the plus side, when done well, you get fluid exchange of information, remix, and cultural explosion. On the minus side, you get COVID-19 everywhere. Striking the right balance gets you far: many optimizing algorithms rely on it such as genetic algorithms, stochastic gradient descent, or cross-validation sampling in machine learning, which each are heavy users of pseudo-random sources. The results speak for themselves: AlphaGo, for instance, beat the best human player at one of the hardest games on Earth, using Monte-Carlo Tree Search. Yes, you guessed it, they call it Monte Carlo for a reason.</li>\n</ol>\n<h2>Information Theory</h2>\n<p>A good Pseudo-Random Number Generator (or PRNG for short) is indistinguishable from a true random output.</p>\n<p><em>So, where do we get this true random output you speak of?</em></p>\n<p>True randomness has statistical meaning, but it is impossible to prove or disprove.\nYou can only have a high confidence.</p>\n<p>You might hope that true randomness can be extracted from nature, but that is also not true.\nThe physical realm contains a large quantity of data storage (“space”),\nand laws that alter it: gravity, electromagnetism, …\nNature is a state transition function and an output; that is also the structure of a PRNG.</p>\n<p>Physical processes that claim to output “true” randomness rely on the large amount of information stored in the environment, and that environment’s diffuse state scrambling, that is presumably extremely hard for an attacker to detect.</p>\n<p>For instance, the fine trajectory of electrons attracted from atom to atom through an electrical circuit causing minuscule delays, or the chaotic motion of gaseous atoms, or stronger yet, quantum behavior of particles.</p>\n<p>Some physicists may argue that the world is not fully deterministic.\nHowever, the Copenhagen Interpretation or Multiverse fans\ncannot disprove the possibility of a non-local world that complies with the Bell-EPR paradox,\nfor instance through superdeterminism or pilot waves.\n(Sorry for those that don’t care about quantum mechanics;\nyou don’t need to understand this paragraph to carry on.)</p>\n<p>Since true randomness is not real, how do we get close?</p>\n<p>Let’s say that you generate bits. If all the bits were <code>1</code>, it would be pretty predictable, right?\nSo the frequency of ones should converge to one out of two, which is what probability half is.</p>\n<p>But if the output was a one followed by a zero continuously (<code>101010…</code>), it would be predictable too!\nSo the frequency of the sequence <code>10</code> in the output should converge to one out of four.</p>\n<p>More generally, every possible sequence of <code>n</code> bits should appear with a frequency converging to <code>1÷2ⁿ</code>.</p>\n<p>(A common romanticization of that idea is the comment that the decimals of π encode the entire works of Shakespeare.\nπ being irrational, its formulation is <a href=\"https://mathworld.wolfram.com/WeylsCriterion.html\">orthogonal to any fractional representation</a>, which is what decimals are.\nThat gives strong credence to the conjecture that its digits form a truly random sequence.)</p>\n<p>That idea might make you uneasy. After all, it gives an impossible requirement on the memory size of a generator.</p>\n<h3>Memory</h3>\n<p>If your state contains <code>i</code> bits, what is the largest sequence of consecutive ones it can output?</p>\n<p>Well, since the PRNG is deterministic, a given state will always yield the same output.\nThere are <code>2ⁱ</code> possible state configurations, so with this entropy, you can at best output <code>i·2ⁱ</code> bits\nbefore you arrive at a previous state and start repeating the same output sequence again and again.</p>\n<p>At least, with an ideal PRNG, you know that one given configuration will output a sequence of <code>i</code> ones.\nThe previous configuration (which transitioned to the configuration that outputs the <code>i</code> ones)\ncannot also output a sequence of <code>i</code> ones:\nif two configurations yielded the same output, then there would be some <code>i</code>-bit output that no configuration produced.\nThat would not be an ideal PRNG.</p>\n<p>So let’s say that the previous configuration gives <code>i-1</code> ones (a zero followed by a ton of ones),\nand that the next configuration gives <code>i-1</code> ones (a ton of ones followed by a zero).\nThat is a total of a maximum of <code>3×i-2</code> consecutive ones.</p>\n<p>Thus, you cannot get <code>3×i-1</code> consecutive ones…\nwhich a true random generator would output with a frequency of <code>1 ÷ 2^(3×i-1)</code>.\nA statistical deviation that you can detect to disprove that a generator is truly random!</p>\n<p>Conversely, it means that <em>true generators require infinite memory</em>, which is impossible in the real world.</p>\n<p>(By the way, yes, it does seem like computing all the digits of π requires infinite memory.\nAll current algorithms need more memory the more digits are output.)</p>\n<p>In practice, you get around the issue by picking a state size <code>i</code> large enough that\ndetecting this statistical anomaly requires a millenia’s worth of random output, too much for anyone to compute.</p>\n<h3>Cycle Analysis</h3>\n<p>So, once we have picked a state size, now we have an upper bound for the period of the PRNG:\nit will repeat the same sequence at least every <code>2ⁱ</code> bits.</p>\n<p>But of course, your mileage may vary. An imperfect generator might have a much lower period.\nUnless you have a mathematical proof for a <strong>lower bound</strong>, maybe your family of generators\nhas a seed (an initialization parameter) which results in the same output being repeated over and over…\nThat is called a fixed point.</p>\n<p>Even if there are no fixed point, there could be a large number of seeds that start repeating soon!\n(That was a real <a href=\"https://www.cs.cornell.edu/people/egs/615/rc4_ksaproc.pdf\">vulnerability in the RC4 cipher</a>, by the way.)</p>\n<p>On the plus side, there is a counterintuitive phenomenon that develops\nwhen a set of links randomly connect with each other in closed chains.\nMost links end up on long chains.\nFor instance, with two links, they will be connected in a chain half the time;\nwith three links, each link will be connected to another link with probability ⅔; etc.</p>\n<p>Better yet, if you increase the number of links linearly,\nyou decrease the proportion of links that are part of small chains exponentially.</p>\n<p>The bottom line is this: you can always put lipstick on the pig by increasing the state size,\nand your generator will look good.</p>\n<p>However, a fundamentally better generator would have become even better yet with an increased state size.</p>\n<h3>Reversibility</h3>\n<p>If you build out the design at random, a danger lingers.\nUnless you are careful, you might build an irreversible generator.\nGiven a state after a generation,\ncan you mathematically compute the previous state?</p>\n<p>If you can’t,\nthen there are multiple initial states that can transition to the current state.\nThat means some states can never happen,\nbecause there are no initial state that transitions to them;\nthey got stolen by the states with multiple previous states pointing to it!</p>\n<p>That is bad. Why?</p>\n<p>First, it reduces the potency of your state size\n(since a percentage of possible states are unreachable).</p>\n<p>Second, many seeds merge into the rail tracks of other seeds,\nconverging to a reduced set of possible streams and outputting the same values!\nNot only does this create inter-seed output correlation,\nit also means that <em>a given stream will likely degrade in period</em>.</p>\n<p><img alt='Irreversible PRNG example.' src='../assets/a-primer-on-randomness/irreversible-prng.svg' width=350px'>\n<p>It could look good for many terabytes, and suddenly reach a fixed point,\nand output the same number over and over.</p>\n<p>In fact, if the states transition to randomly picked states,\nthe average cycle that you eventually get to,\n<a href=\"https://burtleburtle.net/bob/rand/talksmall.html\">loops every 2<sup>(n+1)÷2</sup></a>.</p>\n<p>If you build a <strong>reversible</strong> algorithm,\nat least all streams are a cycle,\nso inter-seed correlation is not inevitable.</p>\n<p>Some streams can have really long cycles.\nBecause they include a lot of states,\na starting seed is more likely to land in a long-cycle state.\nThe average period becomes 2<sup>n-2</sup>, almost the square of the length.</p>\n<p><img alt='Reversible PRNG example.' src='../assets/a-primer-on-randomness/reversible-prng.svg' width=350px'>\n<p>Note that a reversible design does not mean that the state cycles through all possible combinations.\nIt just means that each state points to exactly one other state, and has exactly one state leading to it.\nIn other words, it is a <em>bijection</em>, but not a <em>circular permutation</em>.</p>\n<p><img alt='Circular permutation example.' src='../assets/a-primer-on-randomness/circular-prng.svg' width=350px'>\n<h3>Diffusion</h3>\n<p>Claude Shannon made <a href=\"https://www.iacr.org/museum/shannon/shannon45.pdf\">a very good point the other day</a> (I think it was in 1945?) about ciphers.\nAn ideal pseudo-random source is such that any bit of the input flips half the bits of the output.</p>\n<p>More precisely, ideally, the probability that any bit of the stream flips if a given bit of the state flips, should be ½.\nThat is called <strong>diffusion</strong> of the state.</p>\n<p>After all, if it wasn’t ½, I could start making good guesses about whether this bit of the state is set,\nand slowly recover pieces of the state or even the key.\nAnd suddenly, I can predict the whole stream.</p>\n<p>A related concept is <strong>confusion</strong> of the key.\nIdeally, each bit of the output depends equally on a combination of all bits of the key.\nSo, each bit of the key should change each bit of the stream,\nfor half of the set of possible configurations of the key’s other bits.</p>\n<p>Each bit of the stream should therefore be a complex combination of all of the key’s bits,\nwhile each bit of the key should have an impact stretched along the whole stream.</p>\n<p>These properties particularly matter for cryptographic primitives such as ChaCha20,\nwhere the seed of the PRNG is essentially the cipher key.\nTheir analysis and understanding still matter for PRNG quality;\nalthough some designs don’t take confusion seriously,\nleading to severe correlation of distinct seeds.</p>\n<h2>Tooling</h2>\n<p>Back in the seventies, there was no tooling to pragmatically study the quality of a generator.\nThat made the PRNG hobby somewhat impractical.</p>\n<p>As a sad result, some people produced subpar results, such as IBM’s infamous <a href=\"https://en.wikipedia.org/wiki/RANDU\">RANDU</a>:</p>\n<blockquote>\n<p>It fails the spectral test badly for dimensions greater than 2, and every integer result is odd.</p>\n</blockquote>\n<p>Fortunately, great strides were made since.\nAnyone can get going quickly, up until they start having competitive results.</p>\n<h3>History</h3>\n<p>A first step was Donald Knuth’s description of the use of <strong>Chi-Squared tests</strong> in 1969.</p>\n<p>While its application to generators was described in Knuth’s seminal work\n<em>The Art of Computer Programming</em>, we have to thank Karl Pearson for the concept.</p>\n<p>As the story goes, Pearson was disgruntled at scientists estimating all their results\nbased on the assumption that their statistical distributions were always normal,\nwhen in some cases they very clearly were not. They just didn’t really have any other tool.</p>\n<p>So he worked through the theory. Say you make a claim that some value, for which you have samples,\nfollows a given statistical distribution. (A uniform one perhaps? Like our PRNG outputs?)\nCall that “<strong>the Null Hypothesis</strong>”, because it sounds cool.</p>\n<p>Your evidence is a set of samples that belong in various categories.\nYour null hypothesis is the belief that each category <code>i ∈ {1,…,k}</code> appears with probability <code>pᵢ</code>.\nMaybe the two classes are 0 and 1; maybe they are the 256 possible bytes.</p>\n<p>There are <code>oᵢ</code> <em>observed</em> samples in category <code>i</code>.\nThe theoretical, <em>expected</em> number of samples should be <code>eᵢ</code> = <code>n·pᵢ</code>.\nYou compute the <strong>Chi-Squared statistic</strong>: <code>χ²</code> = <code>Σ (eᵢ - oᵢ)² ÷ eᵢ</code>.</p>\n<p>That statistic follows a distribution of probabilities,\ndepending on the degrees of freedom of the problem at hand.\nIf we are looking at random bytes, each generation must be one of 256 possible outputs:\nso there are 255 degrees of freedom.\n(If it is not in the first 255, it must be in the last, so the last one is not a degree of freedom.)</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/3/35/Chi-square_pdf.svg\" alt=\"Chi-Squared probability density\" /></p>\n<p>Each possible value of <code>χ²</code> you get has a probability of being valid for your null hypothesis.\nOne value is the most probable one. The further you get from it, the least likely it is that your samples are random.</p>\n<p>But by how much?</p>\n<p>You want to know the probability that a true random generator’s <code>χ²</code> lands\nas far from the ideal value as your pseudo-random generator did.\n(After all, even a perfect generator rarely precisely lands on the most probable <code>χ²</code>,\nwhich for random bytes is 253 with probability 1.8%.)</p>\n<p>You can compute the probability that a true random generator’s <code>χ²</code> is bigger (more extreme) than yours.\nThat probability is called a <strong>p-value</strong>.\nIf it is tiny, then it is improbable that a true random generator would get this value;\nand so, it is improbable that what you have is one.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8e/Chi-square_distributionCDF-English.png\" alt=\"Chi-Squared distribution\" /></p>\n<p>With this tool in hand, you can easily check that a process that pretends to be random is not actually so.</p>\n<p>Or, as <a href=\"http://www.economics.soton.ac.uk/staff/aldrich/1900.pdf\">Pearson puts it</a>:</p>\n<blockquote>\n<p>From this it will be more than ever evident how little chance had to do\nwith the results of the Monte Carlo roulette in July 1892.</p>\n</blockquote>\n<p>(Not sure why his academic paper suddenly becomes so specific;\nmaybe he had a gambling problem on top of being a well-known racist.)</p>\n<p>Fun sidenote: if you look at the <code>χ²</code> formula, notice that if your observed values all hit their expectations,\nyou will always end up with a <code>χ²</code> equal to zero, whose p-value is 1.</p>\n<p>Uniform random numbers have this awesome property that their p-values should also be uniformly random,\nand the p-values of the p-values too, and so on.</p>\n<p>The p-value you want is simply one that is not too extreme (eg, higher than 10¯⁵, lower than 1-10¯⁵).\nA p-value of 1 immediately disqualifies your null hypothesis!\nPerfect fits are not random; you must have anomalies some of the time.</p>\n<p>Let’s get back to Donald Knuth. His advice of using this tool to study pseudo-random efforts defined all subsequent work.</p>\n<p>In 1996, another PRNG fellow, George Marsaglia, looked at the state of tooling with discontent.\nSure, those Chi-Squared tests were neat.\nBut writing them by hand was tedious.</p>\n<p>Worse, nothing defined what to observe. Bytes are one thing, but they only detect byte-wise bias.\nWhat about bitwise? What if we count bits, and compare that count to a <em>Known Statistic</em> (<strong>bit counting</strong>)?\nWhat if we count the number of successive times one byte is bigger than the one generated just before (<strong>runs test</strong>)?\nOr maybe count the number of outputs between the appearance of the same value (<strong>gap test</strong>)?\nOr take a random matrix, compute its rank, verify that it validates the <em>Known Statistic</em> (<strong>binary rank</strong>)?</p>\n<p>Well, he didn’t think about all those tests,\nbut he did publish a software package that automatically computed p-values\nfor a dozen of tests. He called it <em>DIEHARD</em>.</p>\n<p>Some are like the ones I described, some are a bit wilder and somewhat redundant,\nsome have a bit too many false positives to be relied upon.</p>\n<p>But it was the start of automation!</p>\n<p>And the start of the systematic extermination of the weak generators.</p>\n<p>In 2003, Robert G. Brown extended it with an easy-to-use command-line interface, <em><a href=\"https://webhome.phy.duke.edu/~rgb/General/dieharder.php\">Dieharder</a></em>,\nthat allowed testing without having to fiddle with compilation options, just by piping data to a program.\nHe aggregated a few tests from elsewhere, such as the NIST’s STS\n(which are surprisingly weak for their cryptographic purpose… Those were simpler times.)</p>\n<p>A big jump in quality came about in 2007.\nPierre L’Écuyer &amp; Richard Simard published <em><a href=\"http://simul.iro.umontreal.ca/testu01/tu01.html\">TestU01</a></em>, a test suite consisting of three bars to clear.</p>\n<ul>\n<li>SmallCrush picks 10 smart tests that killed a number of weak generators in 30 seconds.</li>\n<li>Crush was a very intensive set of 96 tests that killed even more weaklings, but it took 1h to do so.</li>\n<li>BigCrush was the real monster. In 8 hours, its set of 106 tests brutalizes 8 TB of output, betraying subtler biases never before uncovered, even in many previously-beloved PRNGs, such as the still-popular Mersenne Twister. A very sobering moment.</li>\n</ul>\n<p>TestU01 installed two fresh ideas: having multiple levels of intensity, and parameterizing each test.\nThe latter in particular really helped to weed out bad generators.\nMaybe if you look at all the bits, they look fine, but if you look at every eigth bit, maybe not so much?</p>\n<p>The feel of using the programs was still similar, though: you ran the battery of tests,\nyou waited eight hours, and at the end, you were shown the list of all tests whose p-value was too extreme.</p>\n<p>Thence came the current nec-plus-ultra: Chris Doty-Humphrey’s <em>Practically Random</em>,\naffectionately called <a href=\"http://pracrand.sourceforge.net/\">PractRand</a>, published in 2010.</p>\n<p>It was a step up still from TestU01:</p>\n<ul>\n<li>Instead of eating one output for one test and throwing it away, it uses output for multiple tests, and even overlaps the same test families along the stream, maximizing the extraction of statistics from each bit of output.</li>\n<li>It took the concept of levels of intensity to a new level. The program technically never stops; it continuously eats more random data until it finds an unforgivable p-value. On paper, it is guaranteed to find one, at least once it reaches the PRNG’s cycle length; but that assumes you have enough memory for it to store its statistics. In practice, you can go very far: for instance, the author’s own sfc16 design reached flaws after 512 TiB — which took FOUR MONTHS to reach!</li>\n<li>It displays results exponentially. For instance, once at 1 MB of random data read, then at 2, then at 4, then at 8, … Every time, it either tells you that there are no anomalies, or the list of tests with their bad p-values.</li>\n</ul>\n<p><em>(A small note: don’t expect this tooling to be satisfactory for anything cryptographic.\nTheir study relies on much more advanced tooling and analysis pertaining to diffusion,\ndifferential cryptanalysis, algebraic and integral attacks.)</em></p>\n<p>I am a big believer in tooling.\nI believe it is THE great accelerator of civilization by excellence.\nThe step that makes us go from running at 30 km/h, to speeding at 130 km/h, to rocketing at 30 Mm/h.\nIn fact, by the end of this series of posts, I hope to publish one more tool to add to the belt.</p>\n<h3>Hands-On</h3>\n<p>I don’t actually recommend you start out with PractRand for the following reasons:</p>\n<ul>\n<li>You might make silly mistakes. PractRand can kill generators that looked OK in the 80s fairly instantly. You won’t know if your design didn’t even stand a chance back then, or if it was competitive.</li>\n<li>You might have a coding bug. It would be too bad if you threw away a good starting design just because a mask had the wrong bit flipped.</li>\n<li>Seeing Chi-Square failures helps understand the beginner design space. Yes, you want the output to have high entropy; but while it is obvious that you don’t want a poorly balanced output (eg. one possible sequence appears too often), you also don’t want a highly structured output (eg. all possible sequences appear exactly as often), since random noise must contain anomalies. Seeing a high-entropy generator fail because bytes were slightly too equiprobable helped me appreciate what was undesirable. It is often counter-intuitive, so these beginner lessons help a lot.</li>\n</ul>\n<p>I would encourage you to build a silly idea, then pipe 10 MB to <a href=\"https://www.fourmilab.ch/random/\">ent</a>.\nCheck the entropy calculation (it should be somewhere around 7.9999),\nand verify that the Chi-Square p-value is between 0.1% and 99.9% with a set of seeds.</p>\n<p>Compare it to a good randomness source: <code>&lt;/dev/urandom head -c 10M | ent</code>.\n(When I say good, I mean ChaCha20, which is what Linux uses.)</p>\n<p>See what happens when you go from 10M to 100M: does the p-value always decrease, or always increase?\nThat would be bad, very bad indeed.</p>\n<p>Once your Chi-Squared is good, skip all the old tests, and hop into PractRand: <code>./prng | RNG_test stdin64</code>.\nI recommend specifying the size of your output, so that PractRand can know what to look out for.</p>\n<p>Then, goes the contest.</p>\n<p>If you pass 1 MiB: you have beat the sadly very widely-used <a href=\"http://man7.org/linux/man-pages/man3/drand48.3.html\">drand48</a>! (Java, C, …)</p>\n<p>If you pass 256 GiB: you are now better than the widely-used <a href=\"http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\">Mersenne Twister</a>! (Ruby, Python, …)</p>\n<p>If you pass 1 TiB: congratulations, you beat the famous <a href=\"https://cypherpunks.venona.com/archive/1994/09/msg00304.html\">RC4</a> stream cipher!\n(Used as macOS’s old arc4random source, and actually most websites used it for TLS at some point…)</p>\n<p>If you pass 32 TiB: you have won. The <code>RNG_test</code> program automatically stops.\nBeware: it takes about a week to compute… when your generator is fast.</p>\n<p>Quick advice: remember that p-values should be uniformly random.\nIt is inevitable to have some of them be labeled “unusual”, or even, more rarely, “suspicious”.\nIt does not mean you failed.</p>\n<p>When the p-value is too extreme, PractRand will show “FAIL!” with a number of exclamation marks proportional to how horrified it is.\nThen, the program will stop immediately.</p>\n<p>Some tests will fail progressively.\nIf the same test shows “unusual” at 4 GiB, and “suspicious” at 8 GiB,\nit will probably fail at 16 GiB.</p>\n<h3>Speed</h3>\n<p>Once you beat 32 TiB of PractRand, you know your generator is good —\nbut to be useful, it also must be the fastest in its class.</p>\n<p>A few notes can really help you get it up to speed.</p>\n<p>First, pick your target platform.</p>\n<p>You will need different optimization tricks if you build for <code>x86_64</code>\n(Intel / AMD), or for ARM (phones),\nor if you directly target a CMOS integrated circuit,\nif you want to burn your PRNG in an ASIC.</p>\n<p>Let’s say you want to get the most out of your Intel or AMD chip.\nGo as close to the metal as you can. Code in C, C++, or Rust.</p>\n<p>Second, understand the assembly output. Looking at the compiled assembly with <code>gcc prng.c -S -o prng.asm</code> can help.\nI recommend <a href=\"https://software.intel.com/en-us/articles/introduction-to-x64-assembly\">Intel’s introduction</a>, <a href=\"https://www.amd.com/system/files/TechDocs/24592.pdf\">AMD’s manual</a> and <a href=\"https://www.agner.org/optimize/instruction_tables.pdf\">Agner’s instruction tables</a>.</p>\n<p>In particular, a number of amd64 opcodes are inaccessible from the programming language.\nYou can access them in various ways:</p>\n<ul>\n<li>The compiler will smartly use them when they apply. For instance, there is an opcode to rotate the bits of a variable leftward: <code>ROL</code>. But all the C programming language offers is shift (<code>&gt;&gt;</code> for <code>SHR</code>, <code>&lt;&lt;</code> for <code>SHL</code>). However, the compiler will map <code>(a &lt;&lt; 1) | (a &gt;&gt; 63)</code> to the 64-bit <code>ROL</code>.</li>\n<li>Compilers usually include header files or libraries to access those instructions, by exporting functions that compile down to the corresponding instruction. Those are called <strong><a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/\">intrinsics</a></strong>. For instance, our friend the 64-bit <code>ROL</code> appears as <code>_rotl64(a, 1)</code>, if you <code>#include &lt;immintrin.h&gt;</code>.</li>\n<li>SIMD operations heavily depend on your mastery of the compiler. You can either access them through assembly, compiler flags, or intrinsics (my favorite).</li>\n</ul>\n<p>Third, understand the way <a href=\"https://www.agner.org/optimize/microarchitecture.pdf\">the CPU processes the assembly</a>.</p>\n<ul>\n<li><strong><a href=\"https://software.intel.com/en-us/blogs/2011/11/22/pipeline-speak-learning-more-about-intel-microarchitecture-codename-sandy-bridge\">Instruction pipelining</a></strong>: Every instruction executed goes through a number of phases:<br />\n① the instruction is decoded from memory and cut in micro-operations (μops);<br />\n② each μop is assigned internal input and output registers;<br />\n③ the μop reads input registers;<br />\n④ it is executed;<br />\n⑤ it writes to the output register; and finally<br />\n⑥ the output register is written to the target register or memory.<br />\nEach of those stages start processing the next instruction as soon as they are done with the previous one, without waiting for the previous instruction to have cleared all steps. As a result, a good number of instructions are being processed at the same time, each being in a different stage of processing.<br />\n<em>Example gain: successive instructions go faster if each stage of the second one does not depend on the first one’s later stages.</em></li>\n<li><strong>Superscalar execution</strong>: Each μop can be executed by one of multiple execution units; two μops can be executed by two execution units in parallel as long as they don’t have inter-dependencies. There might be one execution unit with logic, arithmetic, float division, and branches; one execution unit with logic, arithmetic, integer and float multiplication; two with memory loads; one with memory stores; one with logic, arithmetic, SIMD permutations, and jumps. Each have a different combination of capabilities.<br />\n<em>Example gain: adding a second instruction doing the same thing, or something belonging to another unit, may not add latency if it acts on independent data.</em></li>\n<li><strong>Out-of-order execution</strong>: Actually, after the μop is assigned internal registers, it is queued in a ReOrder Buffer (ROB) which can store about a hundred. As soon as a μop’s input registers are ready (typically because of a read/write constraint: another μop wrote the information that this μop needs to read), it gets processed by the first execution unit that can process it and is idle. As a consequence, the CPU can process instructions 2, 3, etc. while instruction 1 waits on a read/write dependency, as long as the next instructions don’t have read/write dependencies with stalled instructions.<br />\n<em>Example gain: you can put fast instructions after a slow (or stalled) instruction without latency cost, if they don’t depend on the slow instruction’s output.</em></li>\n<li><strong>Speculative execution</strong>: When there is a branch (eg. an if condition), it would be awful if the whole out-of-order instruction pipeline had to stop until the branch opcode gave its boolean output. So the CPU doesn’t wait to know if the branch is taken: it starts processing the instructions that come after the branch opcode. Once it gets the branch opcode output, it tracks all μops that wrongly executed, and reverts all their work, rewrites the registers, etc.</li>\n<li><strong>Branch prediction</strong>: To get the best out of speculative execution, CPUs make guesses as to what the boolean output of a branch is going to be. It starts executing the instructions it believes will occur.<br />\n<em>Example gain: make your branches nearly always take the same path. It will minimize branch mispredictions, which avoids all the reverting work.</em></li>\n</ul>\n<p>Finally, beware of the way you test performance. A few tips:</p>\n<ol>\n<li>Use the <code>RDTSC</code> CPU opcode to count cycles, as below.</li>\n<li>Disable CPU frequency variability. CPUs nowadays have things like Turbo Boost that change your frequency based on how hot your processor gets and other factors. You want your CPU to have a fixed frequency for the whole process.</li>\n<li>Have as few other processes running as possible. If a process runs in the background, eating CPU, it will affect the results.</li>\n</ol>\n<pre><code>#include &lt;x86intrin.h&gt;\n\nint main() {\n  __int64_t start = _rdtsc();\n  generate_one_gigabyte();\n  __int64_t cycles = _rdtsc() - start;\n  fprintf(stderr, &quot;%f cpb\\n&quot;, ((double)cycles) / 1073741824);\n}\n</code></pre>\n<h3>Designs</h3>\n<p>The earliest design is the <strong>LCG</strong> (Linear Congruent Generator).\nYou can recognize its dirt-simple state transition (a constant addition or multiplication),\nwhich has neat consequences on the analysis of its cycle length (typically 2^statesize).\nUsually, the output is treated with a shift or rotation before delivery.\nWhile they look fairly random, they can have severe issues, such as hyperplane alignment.\nThey also tend to be easy to predict once you reverse-engineer them,\nwhich is why they are not used for anything remotely in need of security.</p>\n<p>Examples of LCG abound: <a href=\"http://man7.org/linux/man-pages/man3/drand48.3.html\">drand48</a>, <a href=\"https://lemire.me/blog/2019/03/19/the-fastest-conventional-random-number-generator-that-can-pass-big-crush/\">Lehmer128</a>, <a href=\"https://www.pcg-random.org/\">PCG</a>, …</p>\n<p>Then come <strong>Shufflers</strong> (eg. <a href=\"https://cypherpunks.venona.com/archive/1994/09/msg00304.html\">RC4</a>, <a href=\"http://burtleburtle.net/bob/rand/isaacafa.html\">ISAAC</a>, <a href=\"http://pracrand.sourceforge.net/RNG_engines.txt\">EFIIX</a>).\nUsually have an “I” in the name (standing for “indirection”).\nThey try to get randomness by shuffling a list, and they shuffle the list from the randomness they find.\nDo not recommend. It is so easy for bias to seep through and combine destructively.\nBesides, weeding out bad seeds is often necessary.</p>\n<p><strong>Mixers</strong> rely on a simple transition function,\nusually addition to what is sometimes called a “gamma” or “<a href=\"https://mathworld.wolfram.com/WeylsCriterion.html\">Weyl coefficient</a>”.\nA common non-cryptographic pattern is a state multiplication, just like in LCG,\nand the output is XORed with a shifted or rotated version of itself before delivery.\nThe second step is basically a hash.\n(To the security-minded readers: I am not talking about collision-resistant compression functions.)\nIn cryptography, usually, the mixer uses some ARX combination for bit diffusion (ARX = Add, Rotate, XOR),\nand is scheduled in multiple rounds (which are basically skipping outputs).\nExamples include <a href=\"https://github.com/wangyi-fudan/wyhash\">wyrand</a>, <a href=\"http://gee.cs.oswego.edu/dl/papers/oopsla14.pdf\">SplitMix</a>, <a href=\"http://vigna.di.unimi.it/ftp/papers/xorshiftplus.pdf\">Xorshift128+</a>, <a href=\"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf\">AES-CTR</a>, and the beloved <a href=\"https://cr.yp.to/chacha/chacha-20080128.pdf\">ChaCha20</a>.</p>\n<p>Finally, the most haphazard of them: <strong>chaotic generators</strong>.\nThey typically have no minimal cycle length, and they just try to stir things up in the state.\nFor instance, <a href=\"https://burtleburtle.net/bob/rand/smallprng.html\">jsf</a> and <a href=\"http://www.romu-random.org/\">Romu</a>.</p>\n<h2>Parting Fun Facts</h2>\n<p>I mentionned ChaCha20 a lot, because it is one of my favorite cryptographic primitives.\nI’ll give you a few fun facts about it, as goodbye.</p>\n<ol>\n<li>ChaCha20 <a href=\"https://cr.yp.to/snuffle/salsafamily-20071225.pdf\">initializes its state</a> with the ASCII for “expand 32-byte k”. It’s a wink on the purpose of the cipher: it takes a 256-bit key, and expands it to a large random stream.</li>\n<li>It is based on the design of <a href=\"https://cr.yp.to/export/1996/0726-bernstein.txt\">a joke cipher that plays on a US law</a> cataloguing encryption as munition, except if it is a hash. He built it as a simple construction on top of a carefully-constructed hash. Calling the core construction a hash caused him trouble later as <a href=\"https://cr.yp.to/snuffle/reoncore-20080224.pdf\">reviewers misunderstood it</a>.</li>\n<li>The initial name of that cipher was Snuffle. (Yes.)</li>\n</ol>\n<p><a href=\"https://www.reddit.com/r/prng/comments/fpy6pg/a_primer_on_randomness/\">Find comments on Reddit</a>.</p>\n<script type=\"application/ld+json\">\n{ \"@context\": \"http://schema.org\",\n  \"@type\": \"BlogPosting\",\n  \"datePublished\": \"2020-03-27T15:17:57Z\",\n  \"keywords\": \"prng, crypto\" }\n</script>\n",
      }
  ]
}
