<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Espadrine’s blog</title>
  <subtitle>Let’s talk about whatever I learn!</subtitle>
  <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/"/>
  <link rel="self" type="application/atom+xml" href="https://espadrine.github.io/blog/feed.xml"/>
  <id>https://espadrine.github.io/blog/feed.xml</id>
  <updated>2019-09-05T17:28:59Z</updated>
      <entry>
        <id>https://espadrine.github.io/blog/posts/two-postgresql-sequence-misconceptions.html</id>
        <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/posts/two-postgresql-sequence-misconceptions.html"/>
        <title>Two PostgreSQL Sequence Misconceptions</title>
        <published>2019-09-05T17:28:59Z</published>
        <category term="sql"/>
        <content type="html">
          <![CDATA[ <h1>Two PostgreSQL Sequence Misconceptions</h1>
<p>✨ <em>With Examples!</em> ✨</p>
<p>Some constructs seem more powerful than the promises they make.</p>
<p>PostgreSQL sequences are like that. Many assume it offers stronger properties
than it can deliver.</p>
<p>They trust them to be the grail of SQL ordering, the one-size-fits-all of strict
serializability. However, there is a good reason Amazon spent design time on
vector clocks in <a href="https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf">Dynamo</a>, Google invested significantly into <a href="https://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf">Chubby</a>, then
<a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/36726.pdf">Percolator</a>’s timestamp oracle, then <a href="https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf">Spanner</a>’s expensive,
atomic-clock-based TrueTime; why Twitter built <a href="https://developer.twitter.com/en/docs/basics/twitter-ids.html">Snowflake</a>, and so many others
built custom timestamp systems.</p>
<ol>
<li>Strict serializability is hard to achieve, especially in a distributed
system, but even in a centralized system with the possibility of failure.</li>
<li>Developers assume the system is strict-serializable, but it usually is not.</li>
<li>When a system provides timestamps, developers will use those as if they were
monotonically strictly increasing atomically throughout the distributed
system, but they often are not, which causes subtle bugs.</li>
</ol>
<h2>The problem space</h2>
<p>To design your system’s properties right, it is often useful or necessary to
determine the order in which events happened. Ideally, you wish for the <strong>“wall
clock” order</strong> (looking at your watch), although instantaneity gets tricky when
events occur at a distance, even within the same motherboard, but especially
across a datacenter, or between cities.</p>
<p>At the very least, you want to reason about <strong>causal ordering</strong>: when that event
happened, did it already see this other event?</p>
<p>A nice property to have, even for a single centralized database, is to give a
monotonically increasing identifier for each row. Most PostgreSQL users rely on
the <code>SERIAL</code> type for that – a sequence. Each insertion will call <code>nextval()</code>
and store an increasing value.</p>
<p>What you implicitly want is to list rows by insertion order, Your mental model
is that each insertion happens at a set “wall clock” time. A first insertion
will happen at T0 and set the identifier 1, the next one happens at T1 and get
number 2, and so on. Therefore, <em>you expect a row with ID N to have causally
been inserted after a row with ID M &lt; N</em>.</p>
<p>Operational order is a consistency constraint strongly associated with isolation
levels. A PostgreSQL database can handle multiple simultaneous operations.</p>
<p><em>(Side note: I could be talking about threads and locks, but I will not, because
those are just tools to achieve properties. PostgreSQL may switch tools to
better meet a given promise (they did so with the serializable level in 2011),
but the promise won’t change.)</em></p>
<p>By default, it promises <strong>Read Committed</strong> isolation: a transaction can witness
the effects of all transactions that commit “before” it does (but not those that
have not committed yet). Their commits are therefore causally ordered by commit
time.</p>
<p>However, nothing else within a transaction has any causal promise with respect
to other transactions. The same <code>SELECT</code> can yield different values;
simultaneous insertions can happen either before, after, or anything in between,
your own insertion.</p>
<p>The highest isolation level PostgreSQL offers is <strong>Serializable</strong> isolation: all
transactions are causally ordered; from <code>BEGIN</code> to <code>COMMIT</code>. Of course,
transactions still execute in parallel; but the database makes sure that
everything that a transaction witnesses can be explained by executing all its
statements either after all statements of another transaction, or before all of
them. It won’t see a changing state within the execution of the transaction.</p>
<p><em>(By the way, PostgreSQL only achieved serializability in 2011, when they
released <a href="https://www.postgresql.org/docs/release/9.1.0/">version 9.1</a> with support for predicate locks. It is hard.)</em></p>
<p>Having a causal order does not mean that this order follows <em>real time</em>: one
insertion may complete at 9:30am <em>after (in causal order)</em> another that
completes later at 10:40am. If you want the additional property that the order
is consistent with wall clock time, you want <strong><a href="https://jepsen.io/consistency/models/strict-serializable">Strict Serializability</a></strong>.</p>
<p>However, <strong>PostgreSQL makes no claim of Strict Serializability</strong>.</p>
<p>Given all this, sequences probably feel much weaker than you initially thought.</p>
<p>You want them to give a continuous set of numbers, but a sequence can yield
values with gaps (1 2 4).</p>
<p>You want them to give a causal order <em>(2 was inserted before 3)</em>, but it can
yield values out of order (1 3 2).</p>
<p>All a sequence promises is to give values that have an order. Not a continuous
order, nor a time order.</p>
<p>Let’s demonstrate both.</p>
<h2>Gaps</h2>
<p>Let’s create a table with a <code>SERIAL</code> identifier. For the purpose of showing
things going right, let’s insert a row.</p>
<pre><code class="language-sql">CREATE TABLE gaps (id SERIAL);
BEGIN;
INSERT INTO order DEFAULT VALUES;
SELECT * FROM gaps;
</code></pre>
<pre><code> id 
----
  1
(1 row)
</code></pre>
<p>Now comes the gap.</p>
<pre><code class="language-sql">BEGIN;
INSERT INTO order DEFAULT VALUES;
ROLLBACK;
</code></pre>
<p>Since we rolled back, nothing happened – or did it?</p>
<p>Let’s now insert another row.</p>
<pre><code class="language-sql">INSERT INTO order DEFAULT VALUES;
SELECT * FROM gaps;
</code></pre>
<pre><code> id 
----
  1
  3
(2 rows)
</code></pre>
<p>Oops! Despite the rollback, the sequence was incremented without being reverted.
Now, there is a gap.</p>
<p>This is not a PostgreSQL bug per se: the way sequences are stored, it just does
not keep the information necessary to undo the <code>nextval()</code> without potentially
breaking other operations.</p>
<p>Let’s now break the other assumption.</p>
<h2>Order violation</h2>
<p>First, a table with a sequence and a timestamp:</p>
<pre><code class="language-sql">CREATE TABLE orders (id SERIAL, created_at TIMESTAMPTZ);
</code></pre>
<p>Let’s set up two concurrent connections to the database. Each will have the same
instructions. I started the first one yesterday:</p>
<pre><code class="language-sql">-- Connection 1
BEGIN;
</code></pre>
<p>I launch the second one today:</p>
<pre><code class="language-sql">-- Connection 2
BEGIN;
INSERT INTO orders (created_at) VALUES (NOW());
COMMIT;
</code></pre>
<p>Let’s go back to the first one:</p>
<pre><code class="language-sql">-- Connection 1
INSERT INTO orders (created_at) VALUES (NOW());
COMMIT;
</code></pre>
<p>Simple enough. But we actually just got the order violation:</p>
<pre><code class="language-sql">SELECT * FROM orders ORDER BY created_at;
</code></pre>
<pre><code> id |          created_at           
----+-------------------------------
  2 | 2019-09-04 21:10:38.392352+02
  1 | 2019-09-05 08:19:34.423947+02
</code></pre>
<p>The order of the sequence does not follow creation order.</p>
<p>Lest you turn your heart to another false god, that behavior remains the same
with serializable transactions.</p>
<h2>Are we doomed?</h2>
<p>No.</p>
<p>Sure, the systems we use have weak assumptions. But that is true at every level.
The nice thing about the world is that you can combine weak things to make
strong things. Pure iron is ductile, and carbon is brittle, but their alloy is
steel.</p>
<p>For instance, you can get the best of both worlds, causal order and “wall clock”
timestamps, by having a <code>TIMESTAMPTZ</code> field, only inserting rows within
serializable transactions, and setting the <code>created_at</code> field to now, or after
the latest insertion:</p>
<pre><code class="language-sql">BEGIN ISOLATION LEVEL SERIALIZABLE;
INSERT INTO orders (created_at)
SELECT GREATEST(NOW(), MAX(created_at) + INTERVAL '1 microsecond') FROM orders;
COMMIT;
</code></pre>
<p>Indeed, PostgreSQL’s <code>TIMESTAMPTZ</code> has a precision up to the microsecond. You
don’t want to have conflicts in your <code>created_at</code> (otherwise you could not
determine causal order between the conflicting rows), so you add a microsecond
to the current time if there is a conflict.</p>
<p>It does mean that concurrent insertions will likely fail, as they will each
acquire a (non-blocking) SIReadLock on the relation.</p>
<p>The reason for that is that we perform a Seq Scan in this trivial example.
With an index, concurrent insertions work:</p>
<pre><code class="language-sql">CREATE TABLE orders (created_at TIMESTAMPTZ UNIQUE NOT NULL);
</code></pre>
<script type="application/ld+json">
{ "@context": "http://schema.org",
  "@type": "BlogPosting",
  "datePublished": "2019-09-05T17:28:59Z",
  "keywords": "sql" }
</script> ]]>
        </content>
      </entry>
      <entry>
        <id>https://espadrine.github.io/blog/posts/how-to-implement-go.html</id>
        <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/posts/how-to-implement-go.html"/>
        <title>How to implement Go</title>
        <published>2018-10-26T19:12:17Z</published>
        <category term="baduk"/>
<category term="ai"/>
        <content type="html">
          <![CDATA[ <h1>How to implement Go</h1>
<p>As I wanted to make an automated Go player, as I planned <a href="http://espadrine.github.io/blog/posts/a-go-browser-battle.html">on a previous
article</a>, I first needed a full implementation of the game
of Go.</p>
<p>Go is a beautiful, tremendously old game with very simple rules and yet
tremendous subtlety. Here are the rules:</p>
<ol>
<li>Each of two players, black or white, take turns either passing or placing a
stone of their color on an intersection of a 19×19 board, starting with
black.</li>
<li>A <strong>group</strong> is a set of stones that are next to each other (up, down, left or
right), or next to a stone that is in the group. A group’s <strong>liberties</strong> are
the number of disctinct empty intersections next to the group’s stones. When
a player places a stone, all enemy groups that no longer have any liberties
are <strong>captured</strong>: they are removed from the board.</li>
<li>A player is not allowed to place a stone if it causes the start of next turn
to include a group with no liberties. That forbids <strong>suicides</strong>.</li>
<li>A player is not allowed to place a stone if it causes the start of next turn
to have a board configuration that already occurred during the game. This is
known as a <strong>Ko</strong> when the configuration happened on the previous turn, and
as a <strong>Superko</strong> more generally. It ensures that games must end; there are no
draws.</li>
<li>When nobody can add stones, the player with the most stones, enclosed
intersections (aka. <strong>territory</strong>), captured stones, and <strong>Komi</strong> (an added
bonus to white to compensate for the asymmetry of who starts first), wins.
The Komi usually has a half point to ensure that there can be no equal
scores, again to forbid draws.</li>
</ol>
<h2>The board</h2>
<p><img src="https://thefiletree.com/metaboard/go/blog/how-to-implement-go/capture.png" alt="AlphaGo vs. AlphaGo game, where white is about to capture 66 stones." /></p>
<p>Since the board is a compact 2-dimensional space, we use an array, with each
slot containing an intersection which includes its state (empty, with a white
stone, etc.) and historical and analytical information for use by the learning
systems: whether it is a legal move, when it last received a move, whether it is
the <strong>atari</strong> liberty of a group, ie. the move that captures the group, and how
many stones it captures.</p>
<p>We also keep track of all groups on the board. Each intersection links to its
group, and the group maintains a set of its stones, and another of its
liberties. When registering a move, groups are updated. It is fast, since at
most four groups may need updating.</p>
<p>There is some logic to merge groups together, destroying the original groups,
and creating a new one that contains the union of the previous ones. It is not
particularly fast (and could likely be improved by keeping the largest group and
adding the others to it), but since merging groups does not happen on every
turn, it did not seem to matter that much for now.</p>
<p>Counting final or partial points also requires maintaining territory
information. Yet again, we use a set to keep the intersections, and each move
updates the territory information corresponding to its surroundings.</p>
<h2>Play</h2>
<p>The most complicated function is inevitably the logic for computing a move. We
must look at surrounding intersections and their groups, to assess whether the
move is a suicide (and therefore invalid), and when it captures enemy stones.</p>
<p>Most operations are essentially constant-time, apart from group merging, since
the number of impacted groups is bounded, and all operations are set updates.</p>
<h2>Superko</h2>
<p>Detecting a match into previous board configurations is probably the trickier
part of the system. Fortunately, a subtle algorithm for it already exists:
<strong>Zobrist hashing</strong>.</p>
<p>It relies on a smart hashing system, where each possible board configuration is
mapped to a unique hash. Trivial hashes would be too slow: your first guesses
for a hash probably require to read the whole board. Instead, a Zobrist hash is
similar to a rolling hash, in that it only needs a single update to account for
the forward change.</p>
<p>You start with a hash of zero for the blank board. When initializing the board,
you generate a random 64-bit value (or, when you are like me and use JS, a
32-bit integer) for each intersection on the board, and for each move that can
be made on that position (place a black stone, or place a white stone).</p>
<p>To compute the hash for a new board configuration, you take the hash of the
previous board. For every change on the board, you XOR the previous hash with
the random value associated with this particular change.</p>
<p>For instance, if you place a black stone on A19 and it captures a white stone on
B19, you will XOR the hash with the random value for “black A19”, and then XOR
it with “white B19”. <em>Fun fact</em>: it yields the same value if you do it the other
way around.</p>
<h2>Score</h2>
<p>The bulk of scoring is establishing territories. To make things simple, we
assume the game went to its final conclusion, where there are no gray zones. All
regions are either surrounded by white or black, and there are no capturable
stones left.</p>
<p>All that remains is to go through intersections in reading order, top to bottom,
left to right, and to stitch each empty spot to its neighbor territories,
potentially joining two larger territories together if necessary. Any stone that
is next to the territory gives it its color.</p>
<p>It makes counting points fairly easy: add komi, capture, stones on board, and
own territory, and the trick is done.</p>
<h2>Ongoing</h2>
<p>Having implemented the game rules is not enough to properly train bots on it.</p>
<p>For starters, we need an <strong>SGF parser</strong> to extract information about the moves
of existing games. SGF (Simple Game Format) is the main format for serializing
Go games.</p>
<p>Then, we want to support <strong>GTP</strong>: the Go Text Protocol is the most common format
for transmitting remote commands between a Go implementation and a robot player.</p>
<p>Finally, we will explore various techniques for AI design.</p>
<p>Expect fun!</p>
<script type="application/ld+json">
{ "@context": "http://schema.org",
  "@type": "BlogPosting",
  "datePublished": "2018-10-26T19:12:17Z",
  "keywords": "baduk, ai" }
</script> ]]>
        </content>
      </entry>
</feed>
