<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Espadrine’s blog</title>
  <subtitle>Let’s talk about whatever I learn!</subtitle>
  <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/"/>
  <link rel="self" type="application/atom+xml" href="https://espadrine.github.io/blog/feed.xml"/>
  <id>https://espadrine.github.io/blog/feed.xml</id>
  <updated>2019-04-29T14:18:51Z</updated>
      <entry>
        <id>https://espadrine.github.io/blog/posts/a-base32-checksum.html</id>
        <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/posts/a-base32-checksum.html"/>
        <title>A base32 checksum</title>
        <published>2019-04-29T14:18:51Z</published>
        <category term="hash"/>
        <content type="html">
          <![CDATA[ <h1>A base32 checksum</h1>
<p><em>(Cue: in the voice of a badly-acted TV commercial.)</em></p>
<blockquote>
<p>Do you always mistakenly wire money to or from the wrong account?
I used to do that all day, everyday!</p>
<p>But then, I found base32check, and my life turned upside-down.
base32check is there for me on my daily purchases, watching out for my
erroneous transcriptions online and offline! And now, for some reason,
I smell of roses and there are sparkling AfterEffects™ all around.</p>
<p>Download the base32check whitepaper. Symptoms may include an accelerated heart
rate, a shortness of breath, and acute depression. Please consult your
healthcare professional in case of severe brain injury.</p>
</blockquote>
<h2>That was weird, let’s be boring instead</h2>
<p>When credit cards sprung into our lives, they were designed to prevent that.
The last digit served no other purpose than to act as a checksum, computed
from the other digits, using an algorithm by Hanz <strong><a href="https://patents.google.com/patent/US2950048">Luhn</a></strong> from 1959.
In his words:</p>
<blockquote>
<p>It is commonly known that in copying a number comprised of a plurality of
digits it often happens that an error occurs by transposing two of the
digits.</p>
</blockquote>
<p>Luhn’s goal was to detect all single-digit errors and most transpositions,
with a single check digit. However, it missed some transpositions, such as
09 / 90.</p>
<div id=luhnWidget>
  <input class=luhnInput value=1234590>
  <strong><output class=luhnValidity>Valid</output></strong>
  (Add a <strong><output class=luhnDigit>6</output></strong> to be valid).
</div>
<script>
// From https://github.com/EDumdum/luhn/blob/master/src/luhn.js
function luhnValid(value) {
  return /^[0-9]+$/.test(value) && luhnRemainder(value) === 0;
}
function luhnGen(value) {
  if (!/^[0-9]+$/.test(value)) { value = ''; }
  return ((10 - luhnRemainder(value + '0')) % 10);
}
function luhnRemainder(value) {
  var array = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];
  var length = value.length, accumulator = 0, bit = 0;
  while (length-- > 0) {
    accumulator += (bit ^= 1) ? value.charCodeAt(length) - '0'.charCodeAt(0) : array[value.charCodeAt(length) - '0'.charCodeAt(0)];
  }
  return accumulator % 10;
}
function initLuhnWidget() {
  const luhnWidget = document.getElementById('luhnWidget');
  const luhnInput = luhnWidget.getElementsByClassName('luhnInput')[0];
  const luhnValidity = luhnWidget.getElementsByClassName('luhnValidity')[0];
  const luhnDigit = luhnWidget.getElementsByClassName('luhnDigit')[0];
  const updateWidget = () => {
    const value = luhnInput.value;
    luhnValidity.textContent = luhnValid(value) ?  'Valid' : 'Invalid';
    const digit = luhnGen(value);
    luhnDigit.textContent = (digit !== digit) ? 'removal of non-digits' : digit;
  };
  luhnInput.addEventListener('input', updateWidget);
  updateWidget();
}
addEventListener('DOMContentLoaded', initLuhnWidget);
</script>
<p>Whether a single check digit could also detect all adjacent transpositions
was an open question, until 1969, when <strong><a href="https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19710510323">Verhoeff</a></strong> designed another
algorithm that did just that.
Furthermore, he gathered the results of a study into a thorough analysis
of the causes of human errors.</p>
<p>Meanwhile, the International Standards Organization published
<a href="https://www.iso.org/standard/31531.html">ISO/IEC 7064</a> in 1983. It includes algorithms for single- and
double-digit checksums of numerical and alphanumerical inputs, with the goal
to detect all single substitutions and most adjacent transpositions.</p>
<p>They intended it for use in future standards.
For instance, <strong><a href="https://www.iso.org/standard/41031.html">IBAN</a></strong> (the International Bank Account Number)
needed a checksum to lower the risk of accidentally transfering funds to the
wrong account number.</p>
<p>Surprisingly, the IBAN system, which supports alphanumeric characters,
relied on MOD 97-10, which was designed only for numeric inputs.</p>
<p>Our analysis indicates that this was a BAD MOVE™.</p>
<p>A root promise of MOD 97-10 as specified in <a href="https://www.iso.org/standard/31531.html">ISO/IEC 7064</a> is to detect
all single substitution errors. Well, not anymore! Not with that
alphabetic-to-numeric conversion. For instance, <code>IIIIIII80</code> conflicts with
<code>IIIII1I80</code>, <code>UDODGOP17</code> with <code>UDODG0P17</code>.</p>
<div id=mod97_10Widget>
  <input class=mod97_10Input value=AB123>
  <strong><output class=mod97_10Validity>Valid</output></strong>
  (Add a <strong><output class=mod97_10Digit>92</output></strong> to be valid).
  <p><button class=findCollision>Find collision</button>
  <output class=collision></output>
</div>
<script>
// From https://github.com/arhs/iban.js/blob/master/iban.js
function iso7064Mod97_10(value) {
  var remainder = value, block;
  while (remainder.length > 2){
    block = remainder.slice(0, 9);
    remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
  }
  return parseInt(remainder, 10) % 97;
}

function iso13616Prepare(value) {
  if (!/^[0-9a-zA-Z]+$/.test(value)) { value = ''; }
  const A = 'A'.charCodeAt(0), Z = 'Z'.charCodeAt(0);
  value = value.toUpperCase();
  return value.split('').map(function(n){
    var code = n.charCodeAt(0);
    if (code >= A && code <= Z){
      // A = 10, B = 11, ... Z = 35
      return code - A + 10;
    } else { return n; }
  }).join('');
}

function mod97_10Valid(value) {
  return /^[0-9a-zA-Z]+$/.test(value) &&
    iso7064Mod97_10(iso13616Prepare(value.slice(0, -2))).toString() === value.slice(-2);
}

function mod97_10FindCollision(value) {
  if (!mod97_10Valid(value)) { return; }
  const target = value.slice(-2);
  const input = value.slice(0, -2);
  const alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  for (let i = 0; i < input.length; i++) {
    for (let a = 0; a < alphabet.length; a++) {
      const other = input.slice(0, i) + alphabet[a] + input.slice(i + 1);
      if (other === input) { continue; }
      if (iso7064Mod97_10(iso13616Prepare(other)).toString() === target) {
        return other + target;
      }
    }
  }
}

function initMod97_10Widget() {
  const widget = document.getElementById('mod97_10Widget');
  const mod97_10Input = widget.getElementsByClassName('mod97_10Input')[0];
  const mod97_10Validity = widget.getElementsByClassName('mod97_10Validity')[0];
  const mod97_10Digit = widget.getElementsByClassName('mod97_10Digit')[0];
  const updateWidget = () => {
    const input = iso13616Prepare(mod97_10Input.value);
    mod97_10Validity.textContent = mod97_10Valid(input) ?  'Valid' : 'Invalid';
    const digits = iso7064Mod97_10(input);
    mod97_10Digit.textContent = (digits !== digits) ? 'removal of non-alnums' :
      digits.toString().padStart(2, '0');
  };
  mod97_10Input.addEventListener('input', updateWidget);
  updateWidget();

  const findCollisionBut = widget.getElementsByClassName('findCollision')[0];
  const collisionOutput = widget.getElementsByClassName('collision')[0];
  findCollisionBut.addEventListener('click', event => {
    const other = mod97_10FindCollision(mod97_10Input.value);
    if (other === undefined) {
      collisionOutput.value =
        'No conflicting single substitution found, try adding valid digits.';
    } else { collisionOutput.value = other; }
  });
}
addEventListener('DOMContentLoaded', initMod97_10Widget);
</script>
<p>Furthermore, while it technically allows mixed case, the uppercase letter always
conflicts with its lowercase, essentially making lowercase too risky to
use. Uppercase all inputs.</p>
<p>On the other hand, MOD 97-10 checksums do not produce letters, which leaves
some of the information content of the checksum on the table, that could
otherwise strengthen the checksum.</p>
<h2>A Blank Slate</h2>
<p>If we were to redesign the global banking system, how would we improve this?</p>
<p>The goals we want for our imaginary account number are:</p>
<ol>
<li><strong>Be easy to transmit.</strong> So, text.</li>
<li><strong>Be short</strong>, to simplify copying.</li>
<li><strong>Contain enough space to scale globally</strong>. We don’t want to run out of
account numbers as the population grows. This, along with the previous
constraint, means that we need to encode as many bits of information as
we can within each character. base64 maybe? That’d be 6 bits per char.</li>
<li><strong>Minimize human transcription errors</strong>. base64 is notably poor in this
respect, because of the 0/O and I/l/1/i visual confusion. On the other
hand, base32 has more information density than just digits, but none of
the ambiguity. Finally, while base64 contains a dash or a dot that can
be cut off by text processors, base32 will be selected as a single word
even when double-clicking.</li>
<li><strong>Allow early detection of errors</strong>. We don’t want to inform the user
of their mistake asynchronously. So the algorithm should be easy to
implement on the user-interface.</li>
</ol>
<p>Obviously, I am not the first to look into this. Notably, <a href="https://en.bitcoin.it/wiki/Base58Check_encoding#Background">Bitcoin</a>
created a solution for this. How does it work, and how does it fare?</p>
<p>In Bitcoin, the account number is roughly a (cryptographic) hash of the user’s
public key, cut and concatenated with a checksum that also uses a cryptographic
hash.</p>
<p>The account number is usually represented in text as <a href="https://en.bitcoin.it/wiki/Base58Check_encoding#Background">base58</a>. It is very
similar to <a href="https://tools.ietf.org/html/rfc4648">base64</a>, except that it removes the 0/O and l/I ambiguity, but
still has the i/1, Z/7, B/8 and S/5 confusion. Besides, transcribing or
communicating mixed-case letters is tedious. Each letter needs mentioning
whether it is uppercase or lowercase. That is why <a href="https://www.youtube.com/watch?v=bLE7zsJk4AI">fourwordsalluppercase</a> is a
great WiFi password.</p>
<p>The checksum uses roughly 5 characters (four bytes of <a href="https://en.bitcoin.it/wiki/Base58Check_encoding#Background">base58</a> is 32 ÷
log2(58)). It is fairly big, which at least ensures that there won’t be
mistakes… unless the account number goes unchecked. If that is the case, neither
the sender nor the recipient may use the funds transferred.</p>
<p>Sadly, the necessity of a bignum library for base58 decoding, and SHA256 as the
checksum algorithm, makes verifying the checksum laborious to implement.
Few user interfaces embed a validator as a result.</p>
<p>Finally, even if we wanted to replace the checksum with an easier-to-use check
digit, it is not immediately easy to design a base58 check character.</p>
<p><a href="https://tools.ietf.org/html/rfc4648">base32</a> avoids many of these inconveniences, especially in lowercase, where
the varied heights are easy to distinguish and where there is no S/5 and Z/7
ambiguity.
However, there isn’t a particularly good, dedicated, check character algorithm
for it — yet.</p>
<p>Let’s create one.</p>
<h2>base32check1</h2>
<p>Luhn, Verhoeff, Damm — some pretty nifty designs are already on the shelves.
Sadly, they mostly focus on digits, which have poor information capacity (3.3
bits per char).</p>
<p>While they can be extended to larger alphabets, that is not trivial nor
standard. (Ah, the joy of tweaking the Verhoeff parameters.) Worse, they are no
longer the coolest kids on the block.</p>
<p>I found a 2016 <a href="https://www.uni-due.de/imperia/md/content/dc/yanling_2015_check_digit.pdf">paper</a> referencing a 2014 one (which I couldn’t get
my hands on. Curse the IEEE overseers and their labyrinthic subscription
models! <em>Please pay $84.50 membership and the paper is $14.95, oh and would you
mind donating because IEEE helps improve the human condition? Also good news, we
offer free shipping for PDF documents.</em>)</p>
<p>No joke, but I digress. The 2014 paper has no value anyway, as the principle is
described in full in the <a href="https://www.uni-due.de/imperia/md/content/dc/yanling_2015_check_digit.pdf">2016 paper</a>, available online.</p>
<p>The main insight is this: if your check digit a<sub>n+1</sub> solves Σ aᵢ·Pⁱ = 0
on a finite field where P is the companion matrix of a primitive polynomial,
<em>it suddenly detects substitutions, transpositions, and twin substitutions</em> with
up to R characters between them, where R grows with the cardinal. Magic!</p>
<p>(We will dig more into exactly what errors it detects later.)</p>
<p>You must pick two numbers carefully to design your checksum: the cardinal and
the primitive.</p>
<ul>
<li>The <strong>cardinal</strong> is the number of elements in the finite field. It is
therefore also the number of possible checksums. For a single-character check
digit, it must be smaller than the size of your alphabet.</li>
<li>The <strong>primitive</strong> does not matter all that much. The most significant part
about it is that you need to compute one. Unfortunately, brute-force is usually
the simplest way to find some.</li>
</ul>
<p>There are two possible cardinals: <em>prime numbers</em> and <em>prime powers</em>. Prime
cardinals are neat, because operations are scalar. On the other hand, additions
and multiplications on prime power cardinal fields are matricial.</p>
<p>I first wanted a single-character checksum. In order to use all the bits that
this checksum had at its disposal, I needed it to support the full base32
alphabet. That meant the cardinal needed to be 32. Sadly, 32 is not a prime; so
it needed to be a prime power. If 2 is the prime, 2⁵ is the cardinal.</p>
<p>Since the cardinal is not a prime, P is a matrix. Here, its size is 5×5.
To build it, we can pick any order-5 <a href="http://mathworld.wolfram.com/PrimitivePolynomial.html">primitive polynomial</a>; I chose 1+x²+x⁵.
To get the companion matrix, set a diagonal of 1s, and set the rightmost column
with the polynomial coefficients, starting with x⁰:</p>
<pre><code>⎛ 0 0 0 0 1 ⎞
⎜ 1 0 0 0 0 ⎟
⎜ 0 1 0 0 1 ⎟
⎜ 0 0 1 0 0 ⎟
⎝ 0 0 0 1 0 ⎠
</code></pre>
<p>Each aᵢ term is a representation of a base32 character as a GF(2⁵) (finite field
of order 2⁵) polynome: a is 0, which we represent as (0 0 0 0 0); b is 1 or (0 0
0 0 1); f is 1+x² or (0 0 1 0 1).</p>
<p>Validating a check character is straightforward: compute Σ aᵢ·Pⁱ; verify that
the result is a zero vector. It does involve writing custom matrix
multiplication and addition primitives to ensure that they are all computed
modulo the cardinal.</p>
<p>Unsurprisingly, the performance is not all that great:</p>
<pre><code>$ node test/perf
10000 runs.
base32check1: 243.500ms
</code></pre>
<p>There is a <a href="https://johnkerl.org/doc/ffcomp.pdf">neat trick</a> to speed up computation on a finite field where
the cardinal is a power of 2: instead of implementing vectors as arrays, use
integers whose binary sequence is the list of polynome coefficients. For
instance, 1+x² (which represents f) is <code>0b00101</code>, or 5.</p>
<p>Then <strong>addition is XOR</strong>, and matrix multiplication is a conditional XOR on the
successive bits of the current row. With aᵢ and bᵢ vectors of size 5:</p>
<pre><code>⎛ a₀ ⎞   ⎛ b₀ ⎞   ⎛ Σ a₀[i]×bᵢ ⎞
⎜ a₁ ⎟   ⎜ b₁ ⎟   ⎜ Σ a₁[i]×bᵢ ⎟
⎜ a₂ ⎟ × ⎜ b₂ ⎟ = ⎜ Σ a₂[i]×bᵢ ⎟
⎜ a₃ ⎟   ⎜ b₃ ⎟   ⎜ Σ a₃[i]×bᵢ ⎟
⎝ a₄ ⎠   ⎝ b₄ ⎠   ⎝ Σ a₄[i]×bᵢ ⎠
</code></pre>
<p>It is 7× faster.</p>
<pre><code>$ node test/perf
10000 runs.
base32check1: 34.120ms
</code></pre>
<p>Now, how do you compute the check character?</p>
<p>First, compute S = Σ aᵢ·Pⁱ for the data you have.
Then, we need to solve S + c·P<sup>n+1</sup> = 0 for c.</p>
<p>Let’s compute c·P<sup>n+1</sup> = -S.
Opposites are equal in GF(2ᵏ), so -S = S.</p>
<p>The second insight is that, since a primitive element is a generator of
its finite field, its powers loop around through all non-zero values. Therefore,
P<sup>2ᵏ-1</sup> = 1, and so, P<sup>n+1</sup>·P<sup>2ᵏ-n-2</sup> = 1.
This gives us the inverse of P<sup>n+1</sup>, which we can get by generating
all the powers of P when initializaing the system.</p>
<p>Then we have c = S·P<sup>2ᵏ-n-2</sup>.</p>
<div id=base32check1Widget>
  <input class=input value=consecration>
  <strong><output class=validity>Valid</output></strong>
  (Add <strong><output class=checksum>A</output></strong> to be valid).
</div>
<script>
(function() {
// From https://github.com/espadrine/base32check/blob/master/1.js
const cardinal = 32;  // 2^5
const primitive = [  // From the 1+x²+x⁵ primitive polynomial.
  0b00001,
  0b10000,
  0b01001,
  0b00100,
  0b00010,
];

function matMul(a, b) {
  const width = 5;
  const height = a.length;
  const mat = new Array(height);
  for (let i = 0; i < height; i++) {
    mat[i] = 0;
    for (let j = 0; j < width; j++) {
      if ((a[i] & (1 << (width - j - 1))) !== 0) {
        mat[i] ^= b[j];
      }
    }
  }
  return mat;
}

function matCp(a) {
  let copy = new Array(a.length);
  for (let i = 0; i < a.length; i++) {
    copy[i] = a[i];
  }
  return copy;
}

const primitivePowers = (function genPowersOfPrimitive() {
  // Index 0 contains P^0 = I, 1 has P^1, … 30 has P^30.
  const powers = [ [], matCp(primitive) ];
  let p = powers[1];
  for (let i = 0; i < cardinal - 3; i++) {
    p = matMul(p, primitive);
    powers.push(p);
  }
  powers[0] = matMul(p, primitive);
  return powers;
})();

function fromBase32Char(c) {
  return c.charCodeAt(0) - (/[a-z]/.test(c)? 97: 24);
}

function toBase32Char(c) {
  c = +c;
  const d = (c > 25)? (c + 24): (c + 97);
  return String.fromCharCode(d);
}

function compute(payload) {
  payload = String(payload).toLowerCase();
  const n = payload.length;

  // We must solve Σ ai P^i = 0 for i from 1 to n+1.
  // First, compute Σ ai P^i for i from 1 to n.
  let sum = 0;
  for (let i = 0; i < n; i++) {
    const a = fromBase32Char(payload[i]);
    sum ^= matMul([a], primitivePowers[(i+1) % (cardinal-1)])[0];
    //console.log(`a ${a}\texp ${i+1}\tsum ${sum}`);
  }

  // We must solve:  sum + code * primitive^(n+1) = 0
  // That is:        sum + opposite           = 0
  // Therefore:      opposite = -sum
  // In GF(2), matrices are their own opposites.
  const opposite = sum;

  // We must solve:  code * primitive^(n+1) = opposite
  // We know:        a^(cardinal-1) = 1
  // Therefore:      a * a^(cardinal-2) = 1
  // Here we have:   a = primitive^(n+1)
  // Hence:          code = opposite * primitive^((cardinal-2)*(n+1))
  let exp = (cardinal-n-2) % (cardinal - 1);
  exp = (exp < 0)? exp + cardinal: exp;
  const inverse = primitivePowers[exp];
  const code = matMul([opposite], inverse)[0];
  //console.log(`opposite ${opposite}\texp ${exp}\tinverse ${JSON.stringify(inverse)}\tcode ${code}`);
  return toBase32Char(code);
}

function validate(payload) {
  return compute(payload) === 'a';
}

function init() {
  const widget = document.getElementById('base32check1Widget');
  const input = widget.getElementsByClassName('input')[0];
  const validity = widget.getElementsByClassName('validity')[0];
  const checksum = widget.getElementsByClassName('checksum')[0];
  const updateWidget = () => {
    const value = input.value;
    validity.textContent = validate(value) ?  'Valid' : 'Invalid';
    const check = compute(value);
    checksum.textContent = (check !== check) ? 'removal of non-base32' : check;
  };
  input.addEventListener('input', updateWidget);
  updateWidget();
}
addEventListener('DOMContentLoaded', init);
})();
</script>
<h2>base32check2</h2>
<p>I chose to also design a 2-character checksum alongside, on the off-chance that
the first was not strong enough. There are 2<sup>2×5</sup> = 1024 possible
combinations of two characters of base32. Using the same design as above, it
required working on 10×10 matrices. I chose not to do that for the following
reasons:</p>
<ul>
<li>The initialization matrix starts to look scary like the Verhoeff one!</li>
<li>There was opportunity for a design without matrices by instead picking a prime
cardinal, which would enormously reduce implementation complexity.</li>
<li>Using a prime instead of a prime power improves your multi-substitution
detection. It doesn’t matter for the 1-character checksum, because improving
your 2-substitution score at the expense of your single-substitution score is
a net loss.</li>
</ul>
<p>So, I picked the largest prime below 1024, 1021, to limit the number of
sequences of two characters with the same value in GF(p). It does mean that
replacing any 75 by aa on even positions will give the same checksum, and the
same is true of 76 / ab and 77 / ac.</p>
<p>I brute-forced a primitive element, and again I took the largest, 1011, although
this time, there is no justification, just sheer superstition. (I tried
computing the statistics of detection of all primitives, and they seemed
equivalent.)</p>
<p>The computation of the check characters is identical. Since the matrices are now
1×1, all operations are scalar. Counter-intuitively, it is faster, although
still in the same ballpark as our optimized base32check1 design above:</p>
<pre><code>$ node test/perf
10000 runs.
base32check2: 23.701ms
</code></pre>
<div id=base32check2Widget>
  <input class=input value=apotheosis>
  <strong><output class=validity>Valid</output></strong>
  (Add <strong><output class=checksum>AA</output></strong> to be valid).
</div>
<script>
(function() {
// From https://github.com/espadrine/base32check/blob/master/2.js
const cardinal = 1021;
// Primitive taken from bin/finite-field-primitive-elements 1021.
const primitive = 1011;
const primitivePowers = (function genPowersOfPrimitive() {
  const powers = [1, primitive];
  let p = primitive;
  for (let i = 0; i < cardinal - 3; i++) {
    p = (p * primitive) % cardinal;
    powers.push(p);
  }
  return powers;
})();

function fromBase32Char(c) {
  return c.charCodeAt(0) - (/[a-z]/.test(c)? 97: 24);
}

function toBase32Char(c) {
  c = +c;
  const d = (c > 25)? (c + 24): (c + 97);
  return String.fromCharCode(d);
}

function compute(payload) {
  payload = String(payload).toLowerCase();
  if (payload.length % 2 === 1) { payload = 'a' + payload; }
  const n = payload.length / 2;

  // We must solve Σ ai P^i = 0 for i from 1 to n+1.
  // First, compute Σ ai P^i for i from 1 to n.
  let sum = 0;
  let p = 1;
  for (let i = 0; i < n; i++) {
    const a = fromBase32Char(payload[2*i]) * 32 + fromBase32Char(payload[2*i+1]);
    // We could use primitivePowers here, although this may be faster.
    p = (p * primitive) % cardinal;
    sum = (sum + a * p) % cardinal;
    //console.log(`a ${a}\tp ${p}\tsum ${sum}`);
  }

  // We must solve:  sum + code * primitive^(n+1) = 0
  // That is:        sum + opposite           = 0
  // Therefore:      opposite = -sum
  const opposite = (sum === 0)? 0: (cardinal - sum);

  // We must solve:  code * primitive^(n+1) = opposite
  // We know:        a^(cardinal-1) = 1
  // Therefore:      a * a^(cardinal-2) = 1
  // Here we have:   a = primitive^(n+1)
  // Hence:          code = opposite * primitive^((cardinal-2)*(n+1))
  let exp = (cardinal-n-2) % (cardinal - 1);
  exp = (exp < 0)? exp + cardinal: exp;
  const inverse = primitivePowers[exp];
  const code = (opposite * inverse) % cardinal;
  //console.log(`opposite ${opposite}\tinverse ${inverse}\tp ${p}\tcode ${code}`);
  return toBase32Char(Math.floor(code / 32)) + toBase32Char(code % 32);
}

function validate(payload) {
  return compute(payload) === 'aa';
}

function init() {
  const widget = document.getElementById('base32check2Widget');
  const input = widget.getElementsByClassName('input')[0];
  const validity = widget.getElementsByClassName('validity')[0];
  const checksum = widget.getElementsByClassName('checksum')[0];
  const updateWidget = () => {
    const value = input.value;
    validity.textContent = validate(value) ?  'Valid' : 'Invalid';
    const check = compute(value);
    checksum.textContent = (check !== check) ? 'removal of non-base32' : check;
  };
  input.addEventListener('input', updateWidget);
  updateWidget();
}
addEventListener('DOMContentLoaded', init);
})();
</script>
<p>The last question we may have is: how well does it compare?</p>
<h2>Results</h2>
<style>
th, td { text-align: "." center; }
</style>
<table>
  <tr><th> Error type   <th> Frequency <th> MOD 11-10 <th> MOD 97-10 <th> MOD 37-36 <th> MOD 1271-36 <th> base32check1 <th> base32check2
  <tr><td> 1sub         <td> 79.05%    <td> 7.6%      <td> 0.291%    <td> 0%        <td> 0%          <td> 0%           <td> 0%
  <tr><td> 0-trans      <td> 10.21%    <td> 9.503%    <td> 0.405%    <td> 0.195%    <td> 0%          <td> 0%           <td> 0%
  <tr><td> 0-2sub       <td> 1.92%     <td> 10.167%   <td> 1.084%    <td> 2.892%    <td> 0%          <td> 3.175%       <td> 0.025%
  <tr><td> 5sub         <td> 1.81%     <td> 10.083%   <td> 0.996%    <td> 2.769%    <td> 0.086%      <td> 3.101%       <td> 0.101%
  <tr><td> 3sub         <td> 1.4%      <td> 9.975%%   <td> 1.048%    <td> 2.714%    <td> 0.072%      <td> 3.087%       <td> 0.088%
  <tr><td> 6sub         <td> 1.34%     <td> 9.958%    <td> 1.013%    <td> 2.775%    <td> 0.074%      <td> 3.099%       <td> 0.099%
  <tr><td> 4sub         <td> 0.97%     <td> 10.042%   <td> 1.033%    <td> 2.737%    <td> 0.069%      <td> 3.133%       <td> 0.1%
  <tr><td> 1-trans      <td> 0.82%     <td> 11.689%   <td> 0.298%    <td> 1.931%    <td> 0%          <td> 0%           <td> 0%
  <tr><td> 2sub         <td> 0.81%     <td> 9.909%    <td> 0.971%    <td> 2.689%    <td> 0.05%       <td> 3.022%       <td> 0.055%
  <tr><td> 0-twin       <td> 0.55%     <td> 9.858%    <td> 0.351%    <td> 1.805%    <td> 0%          <td> 0%           <td> 0%
  <tr><td> phonetic     <td> 0.49%     <td> 11.199%   <td> 0%        <td> 11.055%   <td> 0%          <td> 0%           <td> 0%
  <tr><td> 1-2sub       <td> 0.36%     <td> 9.982%    <td> 1%        <td> 2.765%    <td> 0.04%       <td> 3.229%       <td> 0.208%
  <tr><td> 1-twin       <td> 0.29%     <td> 12.871%   <td> 0.331%    <td> 3.755%    <td> 0%          <td> 0%           <td> 0%
  <tr><th> Format       <td> N/A       <td> 1-digit   <td> 2-digit   <td> 1-alnum   <td> 2-alnum     <td> 1-base32     <td> 2-base32
  <tr><th>Detection rate<td> N/A       <td> 91.994%   <td> 99.629%   <td> 99.654%   <td> 99.995%     <td> 99.732%      <td> 99.993%
  <tr><th> Det. factor  <td> N/A       <td> 0.729     <td> 0.807     <td> 1.581     <td> 1.382       <td> 1.709        <td> 1.380
</table>
<p>Error types:</p>
<ul>
<li><strong><code>n</code>sub</strong>: a sequence of <code>n</code> single-character substitutions, eg. <code>a..b</code> /
<code>c..d</code> is a 2sub.</li>
<li><strong><code>m</code>-trans</strong>: a single transposition between characters that have <code>m</code> other
characters distancing them, eg. <code>a.c</code> / <code>c.a</code> is a 1-trans.</li>
<li><strong><code>m</code>-<code>n</code>sub</strong>: a sequence of <code>n</code> single-character substitutions that have <code>m</code>
other characters distancing them, eg. <code>a.b</code> / <code>c.d</code> is a 1-2sub.</li>
<li><strong><code>m</code>-twin</strong>: two identical characters that are substituted to the same
character, with <code>m</code> other characters distancing them, eg. <code>a.a</code> / <code>b.b</code> is
a 1-twin.</li>
<li><strong>phonetic</strong>: <code>1a</code> / <code>a0</code> with a between 1 and 9, eg. thirteen / thirty.</li>
</ul>
<p>The frequency column indicates how often a human makes a particular type of
error, based on <a href="https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19710510323">Verhoeff</a>’s findings.</p>
<p>We use it to compute an approximate <strong>detection rate</strong>, relying on the
statistical proportion of random inputs for which the checksum does not
detect a given error type. You can see the proportion of undetected errors
for each checksum in the table above.</p>
<p>We added an interesting figure, the <strong>detection factor</strong>. After all,
we want our checksum to make the most of the space it takes. Each bit should
contribute to improving the detection rate. Since we expect a law of diminishing
returns for every additional bit, the detection rate of a given design should
improve with the number of checksum bits by 1 - 2<sup>-k·b</sup>, with b the
number of checksum bits, and k the detection factor, which we compute as
-log2(1-detection) ÷ b.</p>
<p>Each check digit is a base32 character, so they each cost 5 bits of
information, except for the alphanumerical ones, which cheat by producing
values that cannot be mapped to base32 characters without increasing the
error rate. Those take log2(36) ≈ 5.17 bits.</p>
<p><em>(The detection factor is not a perfect model, as the <a href="https://www.iso.org/standard/31531.html">ISO/IEC 7064</a>
algorithms don’t all have the same factor, despite being the same design with
tweaked parameters. That said, MOD 1007-32 is between base32check2 and MOD
1271-36.)</em></p>
<p>You will notice two positive things:</p>
<ul>
<li>Both base32check algorithms have a <em>similar or superior detection rate</em> than
all others for a given number of check characters. (MOD 1271-36 is essentially
identical, apart from the 0/O, 1/I and 8/B confusion risk, which is
unfortunately not computed here, for lack of empirical data.)</li>
<li>base32check1 has the <em>best overall detection factor</em>. base32check2 has a
comparable one to MOD 1271-36. It is slightly lower, implying that it could
potentially use its bits better. Indeed, there are a few tweaks that could
help, although I would prefer to await more statistical human error data
before changing the design, as the detection rate varies significantly if
we label the 3sub thru 6sub as insertion and deletion errors instead, which
they probably are; Verhoeff’s study does not distinguish them.</li>
</ul>
<p>While writing the algorithm, I worried that perhaps I would not be able to
beat the detection rate of IBAN with a single check character (half the
amount!). The whole point of designing base32check2 was on the off-chance
that it didn’t. Fortunately, even base32check1 is better than IBAN’s MOD
97-10, mostly thanks to IBAN’s character conversion procedure.</p>
<h2>User Study</h2>
<p>The computed scores depend on second-hand information from Verhoeff’s study. It
may not map accurately to other alphabets, or alphabet sizes.</p>
<p>Moreover, it does not help determine which alphabet is least error-prone for
human transcription.</p>
<p>Down to the core, we want to minimize the number of times you send money to the
wrong account.</p>
<pre><code>prob_oops = 1 - prob_fine

prob_fine =   Σ  prob_error·prob_detect_error + (1 - prob_error)
            error
            types

prob_error = 1 - (1 - prob_char_error) ^ #chars
</code></pre>
<ul>
<li><code>prob_error</code> is the probability that the human committed at least one error of
that type over the whole text.</li>
<li><code>prob_char_error</code> is the probability of committing that type of error on a
given character. It depends on the type of error, and <code>α</code>, the size of the
alphabet used: the more symbols there are, the more they look alike.</li>
<li><code>prob_detect_error</code> is the probability that the error gets detected. It
depends on the type of error. It is <code>1-prob_collision</code>, the probability that
the checksum yields the same result for two inputs separated by an error of a
give type.</li>
<li><code>#chars</code>: payload size. To transmit b bits of information, it is
<code>⌈b ÷ log2(α)⌉ + checksum size</code>.</li>
</ul>
<p>We can get the probability of a single-character substitution, for instance,
from the probability <code>p</code> of a substitution on a text holding <code>b</code> bits:</p>
<pre><code>prob_char_error = 1 - 2 ^ (log2(1 - p) ÷ ⌈b ÷ log2(α)⌉)
</code></pre>
<p>So, all we need, to find an optimal <code>α</code> and <code>checksum size</code>, is <strong>a user study
estimating the probability of human mistakes</strong>.</p>
<p>…</p>
<script type="application/ld+json">
{ "@context": "http://schema.org",
  "@type": "BlogPosting",
  "datePublished": "2019-04-29T14:18:51Z",
  "keywords": "hash" }
</script> ]]>
        </content>
      </entry>
      <entry>
        <id>https://espadrine.github.io/blog/posts/how-to-implement-go.html</id>
        <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/posts/how-to-implement-go.html"/>
        <title>How to implement Go</title>
        <published>2018-10-26T19:12:17Z</published>
        <category term="baduk"/>
<category term="ai"/>
        <content type="html">
          <![CDATA[ <h1>How to implement Go</h1>
<p>As I wanted to make an automated Go player, as I planned <a href="http://espadrine.github.io/blog/posts/a-go-browser-battle.html">on a previous
article</a>, I first needed a full implementation of the game
of Go.</p>
<p>Go is a beautiful, tremendously old game with very simple rules and yet
tremendous subtlety. Here are the rules:</p>
<ol>
<li>Each of two players, black or white, take turns either passing or placing a
stone of their color on an intersection of a 19×19 board, starting with
black.</li>
<li>A <strong>group</strong> is a set of stones that are next to each other (up, down, left or
right), or next to a stone that is in the group. A group’s <strong>liberties</strong> are
the number of disctinct empty intersections next to the group’s stones. When
a player places a stone, all enemy groups that no longer have any liberties
are <strong>captured</strong>: they are removed from the board.</li>
<li>A player is not allowed to place a stone if it causes the start of next turn
to include a group with no liberties. That forbids <strong>suicides</strong>.</li>
<li>A player is not allowed to place a stone if it causes the start of next turn
to have a board configuration that already occurred during the game. This is
known as a <strong>Ko</strong> when the configuration happened on the previous turn, and
as a <strong>Superko</strong> more generally. It ensures that games must end; there are no
draws.</li>
<li>When nobody can add stones, the player with the most stones, enclosed
intersections (aka. <strong>territory</strong>), captured stones, and <strong>Komi</strong> (an added
bonus to white to compensate for the asymmetry of who starts first), wins.
The Komi usually has a half point to ensure that there can be no equal
scores, again to forbid draws.</li>
</ol>
<h2>The board</h2>
<p><img src="https://thefiletree.com/metaboard/go/blog/how-to-implement-go/capture.png" alt="AlphaGo vs. AlphaGo game, where white is about to capture 66 stones." /></p>
<p>Since the board is a compact 2-dimensional space, we use an array, with each
slot containing an intersection which includes its state (empty, with a white
stone, etc.) and historical and analytical information for use by the learning
systems: whether it is a legal move, when it last received a move, whether it is
the <strong>atari</strong> liberty of a group, ie. the move that captures the group, and how
many stones it captures.</p>
<p>We also keep track of all groups on the board. Each intersection links to its
group, and the group maintains a set of its stones, and another of its
liberties. When registering a move, groups are updated. It is fast, since at
most four groups may need updating.</p>
<p>There is some logic to merge groups together, destroying the original groups,
and creating a new one that contains the union of the previous ones. It is not
particularly fast (and could likely be improved by keeping the largest group and
adding the others to it), but since merging groups does not happen on every
turn, it did not seem to matter that much for now.</p>
<p>Counting final or partial points also requires maintaining territory
information. Yet again, we use a set to keep the intersections, and each move
updates the territory information corresponding to its surroundings.</p>
<h2>Play</h2>
<p>The most complicated function is inevitably the logic for computing a move. We
must look at surrounding intersections and their groups, to assess whether the
move is a suicide (and therefore invalid), and when it captures enemy stones.</p>
<p>Most operations are essentially constant-time, apart from group merging, since
the number of impacted groups is bounded, and all operations are set updates.</p>
<h2>Superko</h2>
<p>Detecting a match into previous board configurations is probably the trickier
part of the system. Fortunately, a subtle algorithm for it already exists:
<strong>Zobrist hashing</strong>.</p>
<p>It relies on a smart hashing system, where each possible board configuration is
mapped to a unique hash. Trivial hashes would be too slow: your first guesses
for a hash probably require to read the whole board. Instead, a Zobrist hash is
similar to a rolling hash, in that it only needs a single update to account for
the forward change.</p>
<p>You start with a hash of zero for the blank board. When initializing the board,
you generate a random 64-bit value (or, when you are like me and use JS, a
32-bit integer) for each intersection on the board, and for each move that can
be made on that position (place a black stone, or place a white stone).</p>
<p>To compute the hash for a new board configuration, you take the hash of the
previous board. For every change on the board, you XOR the previous hash with
the random value associated with this particular change.</p>
<p>For instance, if you place a black stone on A19 and it captures a white stone on
B19, you will XOR the hash with the random value for “black A19”, and then XOR
it with “white B19”. <em>Fun fact</em>: it yields the same value if you do it the other
way around.</p>
<h2>Score</h2>
<p>The bulk of scoring is establishing territories. To make things simple, we
assume the game went to its final conclusion, where there are no gray zones. All
regions are either surrounded by white or black, and there are no capturable
stones left.</p>
<p>All that remains is to go through intersections in reading order, top to bottom,
left to right, and to stitch each empty spot to its neighbor territories,
potentially joining two larger territories together if necessary. Any stone that
is next to the territory gives it its color.</p>
<p>It makes counting points fairly easy: add komi, capture, stones on board, and
own territory, and the trick is done.</p>
<h2>Ongoing</h2>
<p>Having implemented the game rules is not enough to properly train bots on it.</p>
<p>For starters, we need an <strong>SGF parser</strong> to extract information about the moves
of existing games. SGF (Simple Game Format) is the main format for serializing
Go games.</p>
<p>Then, we want to support <strong>GTP</strong>: the Go Text Protocol is the most common format
for transmitting remote commands between a Go implementation and a robot player.</p>
<p>Finally, we will explore various techniques for AI design.</p>
<p>Expect fun!</p>
<script type="application/ld+json">
{ "@context": "http://schema.org",
  "@type": "BlogPosting",
  "datePublished": "2018-10-26T19:12:17Z",
  "keywords": "baduk, ai" }
</script> ]]>
        </content>
      </entry>
      <entry>
        <id>https://espadrine.github.io/blog/posts/file-system-object-storage.html</id>
        <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/posts/file-system-object-storage.html"/>
        <title>Insanities of a File System Object Storage</title>
        <published>2018-05-31T19:42:00Z</published>
        <category term="storage"/>
<category term="posix"/>
        <content type="html">
          <![CDATA[ <h1>Insanities of a File System Object Storage</h1>
<p><em>(TL;DR: I present <a href="https://www.npmjs.com/package/fsos">fsos</a>; but read on to know why.)</em></p>
<p>How do you update a file in Node.js?</p>
<p>Well, let’s browse our dear <a href="https://nodejs.org/api/fs.html">file system API</a>…</p>
<pre><code class="language-js">fs.writeFile(file, data)
</code></pre>
<p>Simple enough, isn’t it?</p>
<p>And yet, there are so many kinds of wrong in this seemingly obvious answer.</p>
<h2>POSIX</h2>
<p>Let’s first educate ourselves. Node.js’ file system API is designed to imitate
and target POSIX, a specification to etch the core Unix experience in granite.
While the main reason for the success of Unix was portability, ensuring that
userland programs could run on different machines, the three tenets of its
design were also delicious (<strong>plain text</strong> as universal interface, composable
programs via a <strong>shell</strong>, and a <strong>hierarchical file system</strong> offering a unified
interface to kernel functionality (not just data storage)).</p>
<p>Naturally, everybody stole those juicy ideas. When Richard Stallman famously
chose to write a free operating system to oppose what we would today call DRM,
he wanted Unix compatibility. When compatibility is seeked, standardization
becomes necessary. IEEE sprung into action in the form of SUS (the Single Unix
Specification), and, with Richard’s suggested name, wrote the Portable Operating
System Interface, <strong>POSIX</strong>.</p>
<p>Richard’s baby, <strong>GNU</strong>, had little impact without a proper kernel. It was a
mere collection of programs that would talk to a Unix file system if there was a
free one. Fortunately, a free one arose, birthed as <strong>Linux</strong>, and gained major
adoption thanks to its sweet mix of speed, stability, and a healthy dose of
bright experiments. When <strong>Node.js</strong> was created, Linux was the overwhelming
king of the server-side, which Node.js wanted to conquer.</p>
<p>In a way, the reason that the obvious one-liner above doesn’t work is Unix’
fault. It designed file interaction in a manner that made a lot of sense for
some uses of the file system, disregarding others. Behind the covers, each
file is a mere set of contiguous disk space (blocks, extents, or sectors) that
point to each other, so it stands to reason that appending data at the end is
probably faster than appending it at the beginning, just as it is with a diary.</p>
<p>The standard C library defined by POSIX reflects the internal design of Unix
file systems without hiding its flaws. Consequence: internally non-obvious
operations have non-obvious solutions, and non-solutions that are as tempting to
use as a chocolate cookie (up until your tongue warns you that it was in fact
raisins).</p>
<p>The most critical interface for file operations is <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/open.html">open</a>. It returns a file
descriptor to operate the file. It takes a handful of required flags and a ton
of optional ones. Most famous amongst the required ones are <code>O_RDONLY</code> if you
will only read, <code>O_WRONLY</code> if you don’t feel like reading anymore, and <code>O_RDWR</code>
if you hate picking a side.</p>
<p>Among the optional flags, <code>O_CREAT</code> creates the file automatically if it doesn’t
exist, <code>O_TRUNC</code> empties the file, and <code>O_APPEND</code> forces you to write only at
the end. (What a coincidence that appending is both fast in file systems and
has a shortcut!)</p>
<p>However, most people use <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/fopen.html">fopen</a>, a layer on top of <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/open.html">open</a>, which
unfortunately has very strange defaults. Instead of the flags we understand, it
has string modes that seem to mean something they do not do. Here are the
nonsensical rules.</p>
<ul>
<li><code>&quot;r&quot;</code> is the only one that prevents writing,</li>
<li>If the string has an <code>r</code>, it doesn’t create a file automatically,</li>
<li>If the string does not have a <code>+</code>, it cannot both read and write,</li>
<li>If the string has a <code>w</code>, it empties the file,</li>
<li>If the string has an <code>a</code>, all writes append to the file (finally one that
does what is on the cover!)</li>
</ul>
<p>For instance, <code>&quot;r+&quot;</code> can write, but won’t create a file automatically for some
reason.</p>
<p>The modes offered by <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/fopen.html">fopen</a> barely target what people actually do with a
file:</p>
<ol>
<li>Read a configuration file: <code>&quot;r&quot;</code>,</li>
<li>Write logs: <code>&quot;a&quot;</code>,</li>
<li>Update a whole file: nothing.</li>
</ol>
<p>For more precise operations, use <code>&quot;r+&quot;</code>. All other possibilities are most likely
bugs waiting to be found. Special mention to <code>&quot;w+&quot;</code> which empties the file it
allows you to read! In fact, the main lesson of this blog post is that <code>O_TRUNC</code>
has only one, very rare, use-case: <em>emptying a file, without removing it,
without writing to it</em>. You should essentially never use <code>&quot;w&quot;</code>.</p>
<p>Naturally, Node.js favours <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/fopen.html">fopen</a>-style modes, instead of the more elegant
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/open.html">open</a>.</p>
<p>Naturally, its default mode for write operations is the useless <code>&quot;w&quot;</code>.</p>
<h2>Async IO</h2>
<p>Now that we have background information, let’s dig into the first issue.</p>
<p>A long-standing problem in HTTP server software is <a href="http://www.kegel.com/c10k.html">C10K</a>, ie. hitting 10k
concurrent clients to serve with a single machine. A large part of beating that
figure is dealing with how slow IO is. Fetching a file on disk takes a long
time! And by default, POSIX system calls make your program wait for the file to
be read, and your program just sits there doing nothing in the meantime, like a
passenger waiting for the bus to come.</p>
<p>Fortunately, POSIX includes a special switch to avoid waiting: <code>O_NONBLOCK</code>. It
is part of <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/open.html">open</a>. When an IO operation is performed, you can do whatever you
want, even though the operation is not done. Later on, you can call <code>poll()</code> or
<code>select()</code> or <code>kqueue()</code> (depending on the OS you use), and learn whether the
operation is done.</p>
<p>Node.js’ <em>raison d’être</em> was completely focused on how easy JS makes
asynchronous operations. Their whole file system interface recommends using the
non-blocking API. But in some cases, it makes zero sense. So it is with
<code>fs.writeFile()</code>. It <em>never</em> does what you want. Not with the default
parameters, anyway.</p>
<p>When you use storage, you implicitly expect some level of consistency. If you
write ‘hello’ to a file which contains ‘hi’ and then immediately read from it,
you don’t expect to read ‘who is this?’ if absolutely nobody wrote to the file
in the meantime. You expect ‘hello’ — or, at least, ‘hi’. But here, you will
read neither what was in the file before, nor what you wrote in it.</p>
<pre><code class="language-js">var fs = require('fs')
var fn = './foo'  // file name
fs.writeFileSync(fn, '1234\n')
fs.createReadStream(fn).pipe(process.stdout)  // → 1234
fs.writeFile(fn, '2345\n')
fs.createReadStream(fn).pipe(process.stdout)  // The file is empty.
</code></pre>
<p>This is the code I submitted as <a href="https://github.com/nodejs/node-v0.x-archive/issues/7807">an issue</a> to Joyent’s node (prior to
the io.js fork).</p>
<p>So what is going on? Why does it break your implicit consistency expectations?
It turns out that the operations you use are not atomic. What <code>fs.writeFile()</code>
really means is “Empty the file immediately, and some day, please fill it with
this.” In POSIX terms, you perform an
<code>open(…, O_WRONLY|O_CREAT|O_TRUNC|O_NONBLOCK)</code>, and the <code>O_TRUNC</code> empties the
file. Since it is <code>O_NONBLOCK</code>, the next line of code gets executed immediately.
Then, Node.js’ event loop spins: on the next tick, it polls, and the file system
tells it that it is done (and indeed, it is). Note that it can take many more
event loop ticks, if there is a larger amount of data written.</p>
<p>Fundamentally, why would you ever want those default flags (aka. <code>fopen</code>’s
<code>'w'</code>)? If you are writing logs or uploading a file to the server, you want
<code>'a'</code> instead; if you are updating configuration files or any type of data, you
want… something that will be described in the next chapter. For any type of file
that has the risk of being read, this default flag is the wrong one to use.</p>
<p>So, the problem is that it was non-blocking, right? After all, if we change it
to be synchronous, it all seems to work, right?</p>
<pre><code class="language-js">var fs = require('fs')
var fn = './foo'  // file name
fs.writeFileSync(fn, '1234\n')
fs.createReadStream(fn).pipe(process.stdout)  // → 1234
fs.writeFileSync(fn, '2345\n')
fs.createReadStream(fn).pipe(process.stdout)  // → 2345
</code></pre>
<p>Don’t you hate it when you read a blog post, and the author ends two
consecutive sentences with “right?”, and you just know it means “false!”</p>
<h2>File Systems</h2>
<p>What if your application crashes?</p>
<p>Having your app crash just after you opened the file for writing, but before it
is done writing, will unsurprisingly result in a half-written file — or an empty
one. Since the memory of the crashed app is reclaimed, the data that was not
written is lost forever!</p>
<p>You want to <em>replace a file</em>. Therefore, even if the application crashes, you
want to make sure that you maintain either the old version, or the new version,
but not an in-between. <code>fs.writeFileSync()</code> does not offer that guarantee, just
as the underlying POSIX primitives. It is tempting, but wrong.</p>
<p>In <a href="http://thunk.org/tytso/blog/2009/03/12/delayed-allocation-and-the-zero-length-file-problem/comment-page-5/#comment-2782">the words</a> of Theodore Ts’o, maintainer of ext4, the most used
file system on Linux and possibly in the world (and creator of <code>/dev/random</code>):</p>
<blockquote>
<p>Unfortunately, there very many application programmers that attempt to update an existing file’s contents by opening it with O_TRUNC. I have argued that those application programs are broken, but the problem is that the application programmers are “aggressively ignorant”, and they outnumber those of us who are file system programmers.</p>
</blockquote>
<p>The fundamental issue is that <code>fs.writeFileSync()</code> is not atomic. It is a series
of operations, the first of which deletes the old version of the file, the next
ones slowly inserting the new version.</p>
<p>What do we want? The new version! When do we want it? Once written on disk,
obviously. We have to first write the new version on disk, alongside the old
one, and then switch them. Fortunately, POSIX offers a primitive that performs
that switch <em>atomically</em>. World, meet <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/rename.html"><code>rename()</code></a>.</p>
<pre><code class="language-js">var tmpId = 0
var tmpName = () =&gt; String(tmpId++)
var replaceFile = (file, data, cb) =&gt; {
  var tmp = tmpName()
  fs.writeFile(tmp, data, err =&gt; {
    if (err != null) { cb(err); return }
    fs.rename(tmp, file, cb)
  })
}
</code></pre>
<p>Obviously, I simplify a few things in this implementation:</p>
<ul>
<li>We have to verify that the <code>tmp</code> file does not exist,</li>
<li>We should make <code>tmp</code> have a UUID to reduce the risk that another process
creates a file with the same name between the moment we check for its
existence and the moment we write to it,</li>
<li>We said before that Node.js was using <code>'w'</code> as the default write flag; we want
to use at least <code>'wx'</code> instead. <code>x</code> is a Node.js invention that uses <code>O_EXCL</code>
instead of <code>O_TRUNC</code>, so that the operation fails if the file already exists
(we would then retry with a different UUID),</li>
<li>We need to create <code>tmp</code> with the same permissions as <code>file</code>, so we also need
to <code>fs.stat()</code> it first.</li>
</ul>
<p>All in all, the finished implementation is nontrival. But this is it, right?
This is the end of our ordeal, right? We finally maintained consistency, right?</p>
<p>I have good news! According to POSIX, yes, this is the best we can do!</p>
<h2>Kernel Panics</h2>
<p>We settled that <em>write temporary then rename</em> survives app crashes under
POSIX. However, there is no guarantee for system crashes! In fact, POSIX gives
absolutely no way to maintain consistency across system crashes with certainty!</p>
<p>Did you really think that being correct according to POSIX was enough?</p>
<p>When Linux used ext2 or ext3, app developers used <em>truncate then write</em> or the
slightly better <em>write temporary then rename</em>, and everything seemed fine,
because system crashes are rare. Then a combination of three things happened:</p>
<ul>
<li>Unlike ext3, ext4 was developed with <strong>delayed allocation</strong>: writes are
performed in RAM, then it waits for a few seconds, and only then does it apply
the changes to disk. It is great for performance when apps write too often.</li>
<li>GPU vendors started writing drivers for Linux. Either they didn’t care much
about their Linux userbase, or all their drivers are faulty: the case remains
that <strong>those drivers crashed a lot</strong>. And yet, the drivers are part of the
kernel: they cause system crashes, not recoverable application crashes.</li>
<li><strong>Desktop Linux</strong> users started playing games.</li>
</ul>
<p>What had to happen, happened: a user played a game that crashed the system, at
which point all files that had been updated in the past 5 seconds were zeroed
out. Upon reboot, the user had lost a lot of data.</p>
<p>There were a lot of sad Linux users and grinding of teeth. As a result, Theodore
Ts’o <a href="http://thunk.org/tytso/blog/2009/03/12/delayed-allocation-and-the-zero-length-file-problem/">patched</a> the kernel to detect when apps update files
the wrong way (ie, both <em>truncate then write</em> and <em>write temporary then
rename</em>), and disabled delayed allocation in those cases.</p>
<p>Yes. <em>Write temporary then rename</em> is also the wrong way to update a file. I
know, it is what I just advised in the previous section! In fact, while POSIX
has no way to guarantee consistency for file updates, here is the closest thing
you’ll get:</p>
<ol>
<li>Read the file’s permissions.</li>
<li>Create a temporary file in the same directory, with the same permissions,
using <code>O_WRONLY</code>, <code>O_CREAT</code> and <code>O_EXCL</code>.</li>
<li>Write to the new file.</li>
<li><a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/fsync.html"><code>fsync()</code></a> that file.</li>
<li>Rename the file over the file you want to update.</li>
<li><code>fsync()</code> the file’s directory.</li>
</ol>
<p>Isn’t it <a href="http://thunk.org/tytso/blog/2009/03/15/dont-fear-the-fsync/">obvious</a> in retrospect?</p>
<p><em>Renaming the file before it is <code>fsync</code>’ed</em> creates a window of time where a
crash would make the directory point to the updated file, which isn’t committed
to disk yet (as it was in the file system cache), and so the file is empty or
corrupt.</p>
<p>Less harmful, <em>a crash after renaming and before the directory’s cache is
written to disk</em> would make it point to the location of the old content. It
doesn’t break atomicity, but if you only want to perform some action after the
file was replaced <em>for sure</em>, you would better <code>fsync</code> that directory before you
do something you will regret. It might seem like nothing, but it can break your
assumptions of data consistency.</p>
<p>If you own an acute sense of observation, you noticed that, while Theodore’s
patch makes it less likely that “badly written file updates” will cause files to
be zeroed out upon a system crash, the bug always existed and still exists! The
timespan where things can go horribly wrong is only reduced. The fault is
rejected on the app developers.</p>
<p>This issue was “fixed” — well, the patch landed at least — in Linux 2.6.30 on
the most common file systems (ext4 and btrfs).</p>
<h2>Conclusion</h2>
<p>Here’s one thing to get away from all this: file systems have a design which
works well with certain operations and… not so well… with others. <strong>Replacing a
file is costly!</strong> You should know what you are doing (or use <a href="https://www.npmjs.com/package/fsos">fsos</a>, my npm
library which wraps all of this in sweet promises), and only replace files at
worst a few times a second. Ideally a lot less often, especially for large
files.</p>
<p>Realistically, though, what you fundamentally want is not to lose work that is
older than X seconds, for some value of X that is thankfully often larger than
a half.</p>
<p>Besides, this is Node.js. One issue that is common elsewhere with a trivial
implementation is that the main thread waits for the I/O to be finished before
it can move on. In Node.js, we get asynchrony for free. The file replacement
happens essentially in the background. The main thread stays as responsive as a
happy antelope!</p>
<p>PS: I feel like I should also advocate for a few things. For every mistake,
there is both a lesson and a prevention; we have only just learned the lesson.
Programmers go to the path of least resistance, and what they face encourages
them to the pit of death. I see two splinters to remove:</p>
<ol>
<li>Linux should offer an atomic file replacement operation that does it all
right. Theodore argues that it is glib’s (and other libraries’) task, but I
disagree. To me, one of the most common file operations doesn’t have its
syscall.</li>
<li>Node.js’ defaults ought to be improved. <code>fs.writeFile()</code> heavily suggests
being used for file updates, and has the default flag of <code>'w'</code>. It is a terribly
ill-advised primitive for any use. It should be replaced by <code>'ax'</code>, but it
cannot, because of legacy! I recommend having a warning, and a separate
<code>fs.updateFile()</code> function.</li>
</ol>
<script type="application/ld+json">
{ "@context": "http://schema.org",
  "@type": "BlogPosting",
  "datePublished": "2018-05-31T19:42:00Z",
  "keywords": "storage, posix" }
</script> ]]>
        </content>
      </entry>
</feed>
