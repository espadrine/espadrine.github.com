<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Espadrine’s blog</title>
  <subtitle>Let’s talk about whatever I learn!</subtitle>
  <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/"/>
  <link rel="self" type="application/atom+xml" href="https://espadrine.github.io/blog/feed.xml"/>
  <id>https://espadrine.github.io/blog/feed.xml</id>
  <updated>2018-03-01T23:19:58Z</updated>
      <entry>
        <id>https://espadrine.github.io/blog/posts/thefiletree-design-log-4.html</id>
        <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/posts/thefiletree-design-log-4.html"/>
        <title>TheFileTree Design Log 4: Accounts</title>
        <published>2018-03-01T23:19:58Z</published>
        <category term="tree"/>
        <content type="html">
          <![CDATA[ <h1>TheFileTree Design Log 4: Accounts</h1>
<p>I mentionned needing to add accounts in <a href="./thefiletree-design-log-2.html">design log 2</a>. It is <a href="https://github.com/garden/tree/commit/04a03786d81733aeca35b1ac4fe5b95c57d0e706">now implemented</a>.</p>
<p>You go to <code>/app/account/</code>, which contains either your account information if you are logged in, or a form to get registered.</p>
<p><img src="https://i.imgur.com/rlfES3K.png" alt="Create an Account" /></p>
<p><img src="https://i.imgur.com/5oZdUdH.png" alt="Congratulations for signing up" /></p>
<p>You get an email with a link back to the website, which gives you a httpOnly secure cookie with a token that the database will recognize and associate to a JSON blob containing your information (email, user name).</p>
<p><img src="https://i.imgur.com/mWxce40.png" alt="Email with link" /></p>
<p><img src="https://i.imgur.com/bNBGooa.png" alt="Welcome page" /></p>
<p><img src="https://i.imgur.com/Pw4thNV.png" alt="Account page" /></p>
<p>As planned, I use email-login, which I improved for this purpose by adding support for <a href="https://www.cockroachlabs.com/">CockroachDB</a>, a serializable distributed SQL database that I plan on using more (maybe for file metadata).</p>
<p>All files <a href="https://github.com/garden/tree/commit/6fbe24c41dfa7085533a6a0157daefc5a28ed7a4">now</a> have an Access Control List (ACL) so that you can set the default access (none (404), reader, writer (can see and edit), owner (can also change the metadata, and therefore the ACL).</p>
<p><img src="https://i.imgur.com/2lROKuf.png" alt="Folder ownership" /></p>
<p>ACLs on folders apply to all subfiles unless an explicit ACL overrides it. It works like variable scoping: the nearest containing metafolder with an explicit ACL that applies to you determines your access.</p>
<p>It works by setting the <code>acl</code> JSON object in the metadata. It is a map from username to right: <code>-</code> for none, <code>r</code> for reader, <code>w</code> for writer, <code>x</code> for owner.  Does it remind you of Unix permissions?</p>
<p><img src="https://i.imgur.com/c04V9J9.png" alt="JSON metadata" /></p>
<p>The <code>*</code> key is for other users (logged in or anonymous).</p>
<h2>Canop Finishing Touches</h2>
<p>Code and bugs are lovers. The monster that I am had to crush a handful of the latter, but it really was to save the former.</p>
<p>For instance, <strong>undo/redo</strong> was semantically wrong.</p>
<p>Why? Of course, CodeMirror supports undo/redo, but it keeps track of all changes. However, when you are editing code with others, you only want to undo <em>your own changes</em>. If you wrote a word and press <em>Undo</em>, you expect your word to be removed, not the operations that someone else did in the meantime.</p>
<p>That required <a href="https://github.com/espadrine/canop/commit/ed07dc80f8da61da15dee0703893315b1f863ba6">managing my own undo stack</a></p>
<p>Another tricky situation arose while testing when I started using <strong>multiple cursors</strong>, a feature that every text editor under the sun stole from <a href="https://www.sublimetext.com/docs/2/multiple_selection_with_the_keyboard.html">SublimeText</a> (although Wikipedia <a href="https://en.wikipedia.org/wiki/Simultaneous_editing">mentions</a> MIT’s <a href="https://en.wikipedia.org/wiki/Simultaneous_editing">LAPIS</a> as the first to sport it, as part of their academic paper.)</p>
<p>I received the editing operations CodeMirror gave me from the <code>change</code> events after it had already updated the editor. The operation positions I dealt with could not easily be mapped back to indices, as they related to the editor’s state before the change.</p>
<p>I tried getting inspiration from <a href="https://github.com/Operational-Transformation/ot.js/blob/8873b7e28e83f9adbf6c3a28ec639c9151a838ae/lib/codemirror-adapter.js#L55">ot.js</a>, but ended up relying on a <a href="https://github.com/espadrine/canop/commit/1bc109bfc6b075b1a59d4e2401f902edfdf8288a">simpler algorithm using the <code>beforeChange</code> event</a>.</p>
<p>It does have the downside that you don’t automatically have multiple changes that are semantically combined (like deleting multiple selections). Those end up having a single undo entry, for instance. I was getting used to reimplementing CodeMirror things, so naturally I implemented a <a href="https://github.com/espadrine/canop/commit/7beec5d1b8e231e0a52c6402931d5db77c2491da">time-based operation grouping system</a>.</p>
<h2>Deploying To Production</h2>
<p>The first version of TheFileTree was located on a server under our college
dormroom desks; the second in a college server; the third on a friend’s
subletting server offer; the fourth on an OVH VPS. This one will be on Google
Cloud, starting with their free tier, where it should fit for some time before
it, hopefully starts generating revenue to be self-sustaining.</p>
<p>It did require some subtle tweaking to support the fact that sending emails is
severely restricted on Google Cloud. There is a handful of partners that you
have to go through; I picked MailJet. I tweaked the <code>email-login</code> npm package
and my DNS zone file to make it work.</p>
<p>As far as administrator interfaces are concerned, Google Cloud is extremely
polished, offering a clean interface with good configuration, and even a
convenient remote SSH-in-a-tab.</p>
<p>While it is still slightly slower to get up and running with a fresh instance
than on Digital Ocean, it is a step up from OVH. That said, OVH offers a
predictable fixed cost and no egress cost, while GCP will have complicated costs
to manage once I need to look after them.</p>
<p>Sadly, to get on the free tier, I was required to host the servers in South
Carolina, US. There is a subtle bit more latency as a result from France.</p>
<p>All in all, it was a very interesting choice to have. The website is now much
more robust than it was before. The only dark spot is the single-node
CockroachDB server, which dies on a regular basis, seemingly because it does not
like to be alone. I will have to investigate further later.</p>
<script type="application/ld+json">
{ "@context": "http://schema.org",
  "@type": "BlogPosting",
  "datePublished": "2018-03-01T23:19:58Z",
  "keywords": "tree" }
</script> ]]>
        </content>
      </entry>
      <entry>
        <id>https://espadrine.github.io/blog/posts/what-i-built-in-2017.html</id>
        <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/posts/what-i-built-in-2017.html"/>
        <title>What I Made In 2017</title>
        <published>2018-02-23T21:37:12Z</published>
        <category term="retro"/>
        <content type="html">
          <![CDATA[ <h1>What I Made In 2017</h1>
<p>After some time working on the collaboration between <a href="https://trainline.eu">Captain Train</a> and its
acquirer <a href="https://www.thetrainline.com">Trainline</a>, to bring together both companies’ technologies through a
common protocol, and maintaining the SNCF integration through major evolutions
of their offerings, I left the company to join <a href="https://qonto.eu">Qonto</a></p>
<p>This bank startup that just came out of beta when I joined (I literally removed
the beta tag from the website on my first week) offers the most streamlined
online banking experience for businesses.</p>
<p>I brought together a great team. This year, we will focus on making the backend
banking integration top-notch.</p>
<p>As a result, I had less time for free-time open-source. There were three big
directions to what I did:</p>
<ul>
<li>The <a href="https://shields.io">Shields.io</a> core team increased, and it allowed us to optimize things
like the <a href="https://github.com/badges/shields/pull/1390">font-width computation</a> (hat tip to Paul Melnikow for that).</li>
<li>I pursue <a href="https://thefiletree.com">TheFileTree</a>, to provide the infrastructure for a self-helping
community of makers. (It is very far from there yet.) I switched it to using
the <a href="https://github.com/espadrine/canop">Canop</a> system, which I still have to make support a full JSON, to allow
for more complex apps. I redid the API and made the app system as designed
the year before.</li>
<li>I played with AI in the stride of DeepMind’s [AlphaGo][] effort, and produced
a Node.js Go library, <a href="https://github.com/espadrine/badukjs">badukjs</a>.</li>
</ul>
<p>To sum up, this year, I switched focus from “me” to “us”. Great things are not a
lonely job, but an active coordination.</p>
<p>Next year, I will focus on building-block infrastructure for more cooperation.</p>
<p><a href="http://espadrine.github.io/blog/posts/what-i-made-in-2016.html">Previously</a>.</p>
<script type="application/ld+json">
{ "@context": "http://schema.org",
  "@type": "BlogPosting",
  "datePublished": "2018-02-23T21:37:12Z",
  "keywords": "retro" }
</script> ]]>
        </content>
      </entry>
      <entry>
        <id>https://espadrine.github.io/blog/posts/what-i-made-in-2016.html</id>
        <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/posts/what-i-made-in-2016.html"/>
        <title>What I Made In 2016</title>
        <published>2017-06-16T20:12:00Z</published>
        <category term="retro"/>
        <content type="html">
          <![CDATA[ <h1>What I Made In 2016</h1>
<p>This year, the company I work for, Captain Train, was purchased by its English counterpart, Trainline. I added support for American Express BTA lodged cards, upgraded the SNCF integration to support their new fare systems, and worked on the common format for carriers.</p>
<p>In open-source, I made the following.</p>
<ul>
<li>A natural-language-processing bot library <a href="https://github.com/espadrine/queread">queread</a>, in order to power <a href="https://github.com/espadrine/travelbot">travelbot</a>, a CLI and Slack bot system which you can ask for travel information across Europe. It uses <a href="https://github.com/espadrine/travel-scrapper">travel-scrapper</a>, which relies on the Trainline websites for data.</li>
<li>A multiplayer musical editor on top of TheFileTree, as a flexible textual editor. See <a href="https://thefiletree.com/david/audio/test.abc">this example</a>.</li>
<li><a href="https://github.com/espadrine/email-login">Email-Login</a> is now robust and ready to use.</li>
<li><a href="https://espadrine.github.io/spash/">Spash</a>, a <a href="https://en.wikipedia.org/wiki/Geohash">geohash</a>-inspired Spacetime locator.</li>
<li>The <a href="https://github.com/espadrine/json-diff">json-diff</a> gem offers a brand-new algorithm for diffing JSON content, with support for in-array object move operations as a first-class citizen, unlike existing LCS-based approaches, resulting in better output. I even published a <a href="https://engineering.thetrainline.com/2016/10/05/how-we-switched-without-a-hitch-to-a-new-api/">blog post</a> on Trainline’s blog.</li>
<li>The <a href="https://github.com/espadrine/json-api-vanilla">json-api-vanilla</a> gem parses <a href="http://jsonapi.org/">JSONAPI</a> payloads (ie. JSON with references, to support object graphs with reference cycles, etc.) and converts it to vanilla Ruby objects, with references correctly hooked up, without <em>any class definition needed</em>, unlike what existed before that.</li>
<li>The <a href="https://github.com/espadrine/canop/blob/master/doc/protocol.md">Canop protocol</a> was finalized and implemented. <a href="https://github.com/espadrine/canop/commit/b0f37b2cc789513e9c8bd1986e113bed6580328f">This commit</a> in particular finally implemented proper index shifting for intention preservation, so that people can edit the same text file simultaneously without losing their changes.</li>
<li>The <a href="https://github.com/espadrine/json-sync">json-sync</a> project sprung out of the Canop effort. Unlike Canop, it cannot yet perform intention preservation. However, its design supports peer-to-peer networks, unlike Canop which is centralized.</li>
</ul>
<p>I took greater concern in explaining my projects. People wouldn’t understand the schematics for the first automobile, but a simple demonstration is enough to blow everybody’s mind.</p>
<p><a href="http://espadrine.tumblr.com/post/138229350686/what-i-did-in-2015">Previously</a>.</p>
<script type="application/ld+json">
{ "@context": "http://schema.org",
  "@type": "BlogPosting",
  "datePublished": "2017-06-16T20:12:00Z",
  "keywords": "retro" }
</script> ]]>
        </content>
      </entry>
      <entry>
        <id>https://espadrine.github.io/blog/posts/a-go-browser-battle.html</id>
        <link rel="alternate" type="text/html" href="https://espadrine.github.io/blog/posts/a-go-browser-battle.html"/>
        <title>A Go Browser Battle</title>
        <published>2017-06-16T16:53:49Z</published>
        <category term="baduk"/>
<category term="ai"/>
        <content type="html">
          <![CDATA[ <h1>A Go Browser Battle</h1>
<p>I learned Go from my Dad — after all, we lived in Japan for a short while when I was little — but DeepMind’s <a href="https://events.google.com/alphago2017/">foray</a> into the venerable board game definitely renewed my interest.</p>
<p>My friend <a href="https://github.com/jankeromnes/">Jan</a>, also intrigued, had started working on a browser-based interface to play the game.</p>
<p>So I offered him a playful challenge: we would both try to build an interesting AI for the game, and we would pit them against each other.
Each AI would be in a separate <a href="https://html.spec.whatwg.org/multipage/workers.html#workers">WebWorker</a>.
At each turn, they would receive the board state.
They would have one minute to come up with their move, in a best-of-five tournament.</p>
<p>From what he told me, Jan will be trying to brute-force the search tree with a traditional minimax.
He is betting on a smart and fast board evaluation.</p>
<p>As for me, I started studying the <a href="https://storage.googleapis.com/deepmind-media/alphago/AlphaGoNaturePaper.pdf">AlphaGo Nature paper</a>.
I took machine learning classes at University; time to apply what I learned!</p>
<p>I definitely don’t have the computing power or the time to reach the level that AlphaGo achieved.
It took months of training and self-play on tens of GPUs and hundreds of CPUs.
My dream is to reach 1d; a rank roughly equivalent to a black belt in martial arts.</p>
<h2>Stepping Stones</h2>
<p>Go games are typically saved as <a href="http://www.red-bean.com/sgf/">SGF</a> files, which are plentiful on the Web.
Therefore, the first step I needed to achieve was to have an SGF parser and a Go execution engine.
The engine is designed to give me a wealth of information about the game: what group is a stone part of, how many liberties that group has…</p>
<p><img src="https://thefiletree.com/metaboard/go/blog/intro/print-sgf.png" alt="SGF printer output" /></p>
<p>I downloaded all KGS games involving players that are 4d or above.
I hope my design achieves 1d, so in principle, the AI will never reach that level of play.</p>
<p>Aside: I think it is interesting to think about learning in terms of <em>training capacity</em> and <em>model capacity</em>.
Here, since we learn to mimick the moves of the training set, the AI can only be as smart as the training set, which puts a limit to how intelligent it can be.
But the model itself can achieve a superior level through self-play (which is what DeepMind did, obviously, since they reached a level beyond the top human player). Then, the level they can achieve is that of the model capacity.
An entity able to perfectly analyse all possible futures would have the highest possible model capacity.</p>
<p>The KGS dataset represents 1.7 million games.
After rotating and reflecting each game, I should reach 13.5 million games, which should be enough to teach the neural network.</p>
<p><img src="https://thefiletree.com/metaboard/go/blog/intro/badukjs.png" alt="6.5 GB of downloaded KGS SGF files" /></p>
<p>Just like AlphaGo, I will first train a <strong>move guesser</strong> using a convolutional neural network.
That network reads the board through a hundred lenses called “filters” that focus on 3x3 squares (or 5x5 on the first layer).
Each lens annotates every intersection with an analysis of its surroundings.
The annotated board is given as input to a different set of lenses, and so on, ten times.
The last annotated board rates the moves with how likely KGS players are to make them.</p>
<p>The move guesser can be used standalone, although I don’t expect it to perform well.
Its main purpose is to limit the number of moves you will look at on the search tree.
Expanding too many nodes can really make your AI lose precious time.</p>
<p>I also want to train a <strong>win guesser</strong>. It is another convolutional neural network.
Instead of yielding likely moves, it will tell you who it thinks will win.</p>
<p>While AlphaGo trained its win guesser from self-play games which also improved its move guesser, I am unsure whether I will have enough time to implement self-play tournaments.
But having a win guesser learn from the KGS data set is possible; it simply might yield poor results.</p>
<p>Finally, if I have time to spare, I may implement <strong>Monte-Carlo Tree Search</strong> (<a href="https://en.wikipedia.org/wiki/Monte-Carlo_Tree_Search">MCTS</a>).
It requires having a very fast move guesser (not the 10-layer monster).
AlphaGo trained a shallower neural network for that purpose, feeding it, in addition to the board state, whether a given move matches a set of well-known patterns.
The paper claims it guesses about 24% of moves from their data set, at a meager 2 μs.</p>
<p>For this purpose, I am tempted to perform some custom statistical analysis on the training data.
Yet again, it depends on what that yields, and how much time I have.</p>
<p>MCTS works by repeating the following steps:</p>
<ol>
<li>walk the tree through what is currently the best move,</li>
<li>without adding nodes to the search tree, play with the weak move guesser until the end of the game,</li>
<li>update the node’s ancestors in the search tree to count the number of wins and losses, which may change what is the best move.</li>
</ol>
<p>When a node is walked through enough times, it gets expanded with the strong move guesser.</p>
<h2>Into The Browser</h2>
<p>I plan on training the networks in Python with <a href="https://keras.io/">Keras</a>, which will use <a href="https://www.tensorflow.org">TensorFlow</a> to benefit from its optimized C++ engine.
I own a desktop computer that unfortunately features a weak-ish Nvidia GPU, but it will have to do!</p>
<p>Keras is fast becoming the standard API to train and export neural nets; Microsoft recently touted its support as a front-end for <a href="https://www.microsoft.com/en-us/cognitive-toolkit/">CNTK</a> when they unveiled <a href="https://docs.microsoft.com/en-us/cognitive-toolkit/ReleaseNotes/CNTK_2_0_Release_Notes">version 2</a> of the library.
Inevitably, there are a couple libraries to convert Keras models to JavaScript.
<a href="https://github.com/transcranial/keras-js">Keras.js</a> most notably features GPU support, but using the GPU in a <a href="https://html.spec.whatwg.org/multipage/workers.html#workers">WebWorker</a> is not yet possible.
Maybe when all browsers implement <a href="https://html.spec.whatwg.org/multipage/scripting.html#the-offscreencanvas-interface">OffscreenCanvas</a> and Keras.js <a href="https://github.com/transcranial/keras-js/issues/3">implements support for it</a>?</p>
<p>And there’s <a href="https://mil-tokyo.github.io/webdnn/">WebDNN</a>, which I will use.</p>
<p>WebDNN is fastest when using <a href="https://webkit.org/blog/7504/webgpu-prototype-and-demos/">WebGPU</a>, a standard that I hope will get traction, but that is currently Safari-only.
However, it can compile the neural network to <a href="http://webassembly.org/">WebAssembly</a>, which should fit in a <a href="https://html.spec.whatwg.org/multipage/workers.html#workers">WebWorker</a>.</p>
<h2>Dreams and Work</h2>
<p>This will all be a free-time effort.
There is no planned date for the final confrontation.</p>
<p>The code for the SGF parser, Go engine, and AIs will be <a href="https://github.com/espadrine/badukjs">here</a>, and the UI code will be <a href="https://github.com/jankeromnes/metaboard">there</a>.</p>
<script type="application/ld+json">
{ "@context": "http://schema.org",
  "@type": "BlogPosting",
  "datePublished": "2017-06-16T16:53:49Z",
  "keywords": "baduk, ai" }
</script> ]]>
        </content>
      </entry>
</feed>
